/-
Copyright (c) 2023 Wanyi He. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Wanyi He
-/
import Mathlib.Topology.Sequences
import Mathlib.Order.LiminfLimsup
import Mathlib.Topology.Semicontinuous

/-!
## Main results

We introduce some equivalent definitions of LowerSemicontinuous functions.
* `lowerSemicontinuous_iff_le_liminf`:
  a function is lower semi-continuous if and only if `‚àÄ x, f x ‚â§ (liminf f <| ùìù x)`
* `lowerSemicontinuous_iff_IsClosed_epigraph`:
  a function is lower semi-continuous if and only if its epigraph is closed.
* `lowerSemicontinuous_iff_IsClosed_sublevel`:
  a function is lower semi-continuous if and only if all its sublevel sets are closed.

## References

* <https://en.wikipedia.org/wiki/Closed_convex_function>
* <https://en.wikipedia.org/wiki/Semi-continuity>

-/


open Topology Filter Set TopologicalSpace

variable {ùïú E F Œ± Œ≤ Œπ : Type*}

variable [AddCommMonoid E]

variable [CompleteLinearOrder F] [DenselyOrdered F]

variable {x : E} {s t : Set E} {f : E ‚Üí F}

variable [TopologicalSpace E] [TopologicalSpace F]

variable [FirstCountableTopology E] [FirstCountableTopology F]

variable [OrderTopology F]

theorem lowerSemicontinuous_TFAE (f : E ‚Üí F) :
    List.TFAE [LowerSemicontinuous f,
      ‚àÄ x, f x ‚â§ (liminf f <| ùìù x),
      IsClosed {p : E √ó F | f p.1 ‚â§ p.2},
      ‚àÄ (r : F), IsClosed {x | f x ‚â§ r}] := by
  tfae_have 1 ‚Üí 2
  ¬∑ intro hf x; specialize hf x
    unfold LowerSemicontinuousAt at hf
    contrapose! hf
    obtain ‚ü®y,lty,ylt‚ü© := exists_between hf; use y
    exact ‚ü®ylt, fun h => not_le_of_lt lty
      (Filter.le_liminf_of_le (by isBoundedDefault)
        (Eventually.mono h (fun _ hx => le_of_lt hx)))‚ü©
  tfae_have 2 ‚Üí 1
  ¬∑ exact fun hf x y ylt
      => Filter.eventually_lt_of_lt_liminf (lt_of_lt_of_le ylt (hf x))
  tfae_have 2 ‚Üí 3
  ¬∑ intro hf; apply IsSeqClosed.isClosed
    intro f' ‚ü®x', y'‚ü© hxy cxy
    rw [Prod.tendsto_iff] at cxy
    let x : ‚Ñï -> E := fun (n : ‚Ñï) => (f' n).1
    calc
      f x' ‚â§ liminf f (ùìù x') := hf x'
      _ ‚â§ liminf (f ‚àò x) atTop := by
        rw[liminf_eq, liminf_eq]
        exact sSup_le_sSup (fun _ fa => (eventually_iff_seq_eventually.mp fa) x cxy.1)
      _ ‚â§ liminf (fun (n : ‚Ñï) => (f' n).2) atTop :=
        liminf_le_liminf (eventually_of_forall (fun n => by convert hxy n))
      _ = y' := (cxy.2).liminf_eq
  tfae_have 3 ‚Üí 4
  ¬∑ exact fun hf _ => IsSeqClosed.isClosed fun ‚¶É_‚¶Ñ ‚¶É_‚¶Ñ xns cx =>
    IsClosed.isSeqClosed hf (fun n => xns n) (Tendsto.prod_mk_nhds cx tendsto_const_nhds)
  tfae_have 4 ‚Üí 2
  ¬∑ intro h; by_contra h; push_neg at h
    obtain ‚ü®x, hx‚ü© := h
    obtain ‚ü®t, ‚ü®ltt, tlt‚ü©‚ü© := exists_between hx
    apply not_le_of_gt tlt
    apply isClosed_iff_frequently.mp (h t) x
    apply frequently_iff.mpr; intro _ hu
    have h : ‚àÉ·∂† (y : E) in ùìù x, f y ‚â§ t := by
      apply frequently_iff.mpr; intro _ hu
      obtain ‚ü®x, xu, fx‚ü© :=
        (frequently_iff.mp (frequently_lt_of_liminf_lt (by isBoundedDefault) ltt)) hu
      exact Exists.intro x ‚ü®xu, LT.lt.le fx‚ü©
    obtain ‚ü®x, xu, fx‚ü© := (frequently_iff.mp h) hu
    exact Exists.intro x ‚ü®xu, fx‚ü©
  tfae_finish

theorem lowerSemicontinuous_iff_le_liminf :
    LowerSemicontinuous f ‚Üî ‚àÄ x, f x ‚â§ (liminf f <| ùìù x) :=
  (lowerSemicontinuous_TFAE f).out 0 1

theorem lowerSemicontinuous_iff_IsClosed_epigraph :
    LowerSemicontinuous f ‚Üî IsClosed {p : E √ó F | f p.1 ‚â§ p.2} :=
  (lowerSemicontinuous_TFAE f).out 0 2

theorem lowerSemicontinuous_iff_IsClosed_sublevel :
    LowerSemicontinuous f ‚Üî ‚àÄ (r : F), IsClosed {x | f x ‚â§ r} :=
  (lowerSemicontinuous_TFAE f).out 0 3

theorem LowerSemicontinuous.le_liminf (hf : LowerSemicontinuous f) :
    ‚àÄ x, f x ‚â§ (liminf f <| ùìù x) :=
  lowerSemicontinuous_iff_le_liminf.mp hf

theorem LowerSemicontinuous.IsClosed_sublevel {f : E ‚Üí F} (hf : LowerSemicontinuous f) :
    ‚àÄ (r : F), IsClosed {x | f x ‚â§ r} :=
  lowerSemicontinuous_iff_IsClosed_sublevel.mp hf

theorem LowerSemicontinuous.IsClosed_epigraph {f : E ‚Üí F} (hf : LowerSemicontinuous f) :
    IsClosed {p : E √ó F | f p.1 ‚â§ p.2} :=
  lowerSemicontinuous_iff_IsClosed_epigraph.mp hf
