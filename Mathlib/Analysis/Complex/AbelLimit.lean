/-
Copyright (c) 2024 Jeremy Tan. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Tan
-/
import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.SpecificLimits.Normed

/-!
# Abel's limit theorem

## References

* https://planetmath.org/proofofabelslimittheorem
* https://en.wikipedia.org/wiki/Abel%27s_theorem
-/


open Finset Filter Complex

open scoped BigOperators Topology

/-- The Stolz set for a given `M`. -/
def stolzSet (M : ‚Ñù) : Set ‚ÑÇ := {z | ‚Äñ1 - z‚Äñ < M * (1 - ‚Äñz‚Äñ)}

variable {f : ‚Ñï ‚Üí ‚ÑÇ} {l : ‚ÑÇ} (h : Tendsto (fun n ‚Ü¶ ‚àë i in range n, f i) atTop (ùìù l))

lemma abel_aux {z : ‚ÑÇ} (hz : ‚Äñz‚Äñ < 1) :
    Tendsto (fun n ‚Ü¶ (1 - z) * ‚àë i in range n, (l - ‚àë j in range (i + 1), f j) * z ^ i)
      atTop (ùìù (l - ‚àë' n, f n * z ^ n)) := by
  let s := fun n ‚Ü¶ ‚àë i in range n, f i
  have k := h.sub (summable_power_of_norm_lt_one h.cauchySeq hz).hasSum.tendsto_sum_nat
  simp_rw [‚Üê sum_sub_distrib, ‚Üê mul_one_sub, ‚Üê geom_sum_mul_neg, ‚Üê mul_assoc, ‚Üê sum_mul,
    mul_comm, mul_sum _ _ (f _), range_eq_Ico, ‚Üê sum_Ico_Ico_comm', ‚Üê range_eq_Ico,
    ‚Üê sum_mul] at k
  conv at k =>
    enter [1, n]
    rw [sum_congr (g := fun j ‚Ü¶ (‚àë k in range n, f k - ‚àë k in range (j + 1), f k) * z ^ j)
      rfl (fun j hj ‚Ü¶ by congr 1; exact sum_Ico_eq_sub _ (mem_range.mp hj))]
  suffices : Tendsto (fun n ‚Ü¶ (l - s n) * ‚àë i in range n, z ^ i) atTop (ùìù 0)
  ¬∑ simp_rw [mul_sum] at this
    replace this := (this.const_mul (1 - z)).add k
    conv at this =>
      enter [1, n]
      rw [‚Üê mul_add, ‚Üê sum_add_distrib]
      enter [2, 2, i]
      rw [‚Üê add_mul, sub_add_sub_cancel]
    rwa [mul_zero, zero_add] at this
  refine' squeeze_zero_norm (a := fun n ‚Ü¶ ‚Äñl - s n‚Äñ * 2 / ‚Äñ1 - z‚Äñ) (fun n ‚Ü¶ _) _
  ¬∑ dsimp only
    rw [geom_sum_eq (by contrapose! hz; simp [hz]), ‚Üê mul_div_assoc, norm_div, norm_mul,
      norm_sub_rev _ 1, norm_sub_rev _ 1]
    gcongr
    calc
      ‚Äñ1 - z ^ n‚Äñ ‚â§ ‚Äñ1‚Äñ + ‚Äñz ^ n‚Äñ := norm_sub_le _ _
      _ ‚â§ 1 + 1 := by
        rw [norm_one, norm_pow, add_le_add_iff_left]
        exact pow_le_one _ (norm_nonneg _) hz.le
      _ = 2 := by norm_num
  ¬∑ simp_rw [mul_div_assoc]
    convert (h.const_sub _).norm.mul_const _
    simp

/-- **Abel's limit theorem**. Given a power series converging at 1, the corresponding function
is continuous at 1 when approaching 1 within a fixed Stolz set. -/
theorem tendsto_tsum_power_nhdsWithin_stolzSet {M : ‚Ñù} (hM : 1 ‚â§ M) :
    Tendsto (fun z ‚Ü¶ ‚àë' n, f n * z ^ n) (ùìù[stolzSet M] 1) (ùìù l) := by
  -- Abbreviations
  let s := fun n ‚Ü¶ ‚àë i in range n, f i
  let g := fun z ‚Ü¶ ‚àë' n, f n * z ^ n
  have hm := Metric.tendsto_atTop.mp h
  rw [Metric.tendsto_nhdsWithin_nhds]
  simp only [dist_eq_norm] at hm ‚ä¢
  -- Introduce the "challenge" `Œµ`
  intro Œµ Œµpos
  -- First bound, handles the tail
  obtain ‚ü®B‚ÇÅ, hB‚ÇÅ‚ü© := hm (Œµ / 4 / M) (by positivity)
  clear hm
  -- Second bound, handles the head
  let F := ‚àë i in range B‚ÇÅ, ‚Äñl - s (i + 1)‚Äñ
  have Fpos : 0 ‚â§ F := sum_nonneg (fun _ _ ‚Ü¶ by positivity)
  use Œµ / 4 / (F + 1), by positivity
  intro z zm zd
  simp only [stolzSet, Set.mem_setOf_eq] at zm
  have zn : ‚Äñz‚Äñ < 1 := by
    by_contra! y
    rw [‚Üê tsub_nonpos, ‚Üê mul_le_mul_left (show 0 < M by positivity), mul_zero] at y
    exact absurd (norm_nonneg _) ((zm.trans_le y).not_le)
  have zv : 0 < ‚Äñ1 - z‚Äñ := by
    by_contra! y
    replace y := le_antisymm y (norm_nonneg _)
    rw [norm_sub_eq_zero_iff] at y
    rw [‚Üê y, norm_one] at zn
    linarith only [zn]
  have p := abel_aux h zn
  simp_rw [Metric.tendsto_atTop, dist_eq_norm, norm_sub_rev] at p
  -- Third bound, regarding the distance between `l - g z` and the rearranged sum
  obtain ‚ü®B‚ÇÇ, hB‚ÇÇ‚ü© := p (Œµ / 2) (by positivity)
  clear p
  replace hB‚ÇÇ := hB‚ÇÇ (max B‚ÇÅ B‚ÇÇ) (by simp)
  suffices : ‚Äñ(1 - z) * ‚àë i in range (max B‚ÇÅ B‚ÇÇ), (l - s (i + 1)) * z ^ i‚Äñ < Œµ / 2
  ¬∑ calc
      ‚Äñg z - l‚Äñ = ‚Äñl - g z‚Äñ := by rw [norm_sub_rev]
      _ = ‚Äñl - g z - (1 - z) * ‚àë i in range (max B‚ÇÅ B‚ÇÇ), (l - s (i + 1)) * z ^ i +
          (1 - z) * ‚àë i in range (max B‚ÇÅ B‚ÇÇ), (l - s (i + 1)) * z ^ i‚Äñ := by rw [sub_add_cancel _]
      _ ‚â§ ‚Äñl - g z - (1 - z) * ‚àë i in range (max B‚ÇÅ B‚ÇÇ), (l - s (i + 1)) * z ^ i‚Äñ +
          ‚Äñ(1 - z) * ‚àë i in range (max B‚ÇÅ B‚ÇÇ), (l - s (i + 1)) * z ^ i‚Äñ := norm_add_le _ _
      _ < Œµ / 2 + Œµ / 2 := add_lt_add hB‚ÇÇ this
      _ = _ := add_halves Œµ
  -- We break the rearranged sum along `B‚ÇÅ`
  calc
    ‚Äñ(1 - z) * ‚àë i in range (max B‚ÇÅ B‚ÇÇ), (l - s (i + 1)) * z ^ i‚Äñ =
        ‚Äñ(1 - z) * ‚àë i in range B‚ÇÅ, (l - s (i + 1)) * z ^ i +
          (1 - z) * ‚àë i in Ico B‚ÇÅ (max B‚ÇÅ B‚ÇÇ), (l - s (i + 1)) * z ^ i‚Äñ := by
      rw [‚Üê mul_add, sum_range_add_sum_Ico _ (le_max_left B‚ÇÅ B‚ÇÇ)]
    _ ‚â§ ‚Äñ(1 - z) * ‚àë i in range B‚ÇÅ, (l - s (i + 1)) * z ^ i‚Äñ +
        ‚Äñ(1 - z) * ‚àë i in Ico B‚ÇÅ (max B‚ÇÅ B‚ÇÇ), (l - s (i + 1)) * z ^ i‚Äñ := norm_add_le _ _
    _ = ‚Äñ1 - z‚Äñ * ‚Äñ‚àë i in range B‚ÇÅ, (l - s (i + 1)) * z ^ i‚Äñ +
        ‚Äñ1 - z‚Äñ * ‚Äñ‚àë i in Ico B‚ÇÅ (max B‚ÇÅ B‚ÇÇ), (l - s (i + 1)) * z ^ i‚Äñ := by
      rw [norm_mul, norm_mul]
    _ ‚â§ ‚Äñ1 - z‚Äñ * ‚àë i in range B‚ÇÅ, ‚Äñl - s (i + 1)‚Äñ * ‚Äñz‚Äñ ^ i +
        ‚Äñ1 - z‚Äñ * ‚àë i in Ico B‚ÇÅ (max B‚ÇÅ B‚ÇÇ), ‚Äñl - s (i + 1)‚Äñ * ‚Äñz‚Äñ ^ i := by
      gcongr <;> simp_rw [‚Üê norm_pow, ‚Üê norm_mul, norm_sum_le]
  -- then prove that the two pieces are each less than `Œµ / 4`
  have S‚ÇÅ : ‚Äñ1 - z‚Äñ * ‚àë i in range B‚ÇÅ, ‚Äñl - s (i + 1)‚Äñ * ‚Äñz‚Äñ ^ i < Œµ / 4 := by
    calc
      _ ‚â§ ‚Äñ1 - z‚Äñ * ‚àë i in range B‚ÇÅ, ‚Äñl - s (i + 1)‚Äñ := by
        gcongr; nth_rw 2 [‚Üê mul_one ‚Äñ_‚Äñ]
        gcongr; exact pow_le_one _ (norm_nonneg _) zn.le
      _ < ‚Äñ1 - z‚Äñ * (F + 1) := by gcongr; linarith
      _ < _ := by rwa [norm_sub_rev, lt_div_iff (by positivity)] at zd
  have S‚ÇÇ : ‚Äñ1 - z‚Äñ * ‚àë i in Ico B‚ÇÅ (max B‚ÇÅ B‚ÇÇ), ‚Äñl - s (i + 1)‚Äñ * ‚Äñz‚Äñ ^ i < Œµ / 4 := by
    calc
      _ ‚â§ ‚Äñ1 - z‚Äñ * ‚àë i in Ico B‚ÇÅ (max B‚ÇÅ B‚ÇÇ), Œµ / 4 / M * ‚Äñz‚Äñ ^ i := by
        gcongr with i hi
        have := hB‚ÇÅ (i + 1) (by linarith [(mem_Ico.mp hi).1])
        rw [norm_sub_rev] at this
        exact this.le
      _ = ‚Äñ1 - z‚Äñ * (Œµ / 4 / M) * ‚àë i in Ico B‚ÇÅ (max B‚ÇÅ B‚ÇÇ), ‚Äñz‚Äñ ^ i := by
        rw [‚Üê mul_sum, ‚Üê mul_assoc]
      _ ‚â§ ‚Äñ1 - z‚Äñ * (Œµ / 4 / M) * ‚àë' i, ‚Äñz‚Äñ ^ i := by
        gcongr
        exact sum_le_tsum _ (fun _ _ ‚Ü¶ by positivity)
          (summable_geometric_of_lt_1 (by positivity) zn)
      _ = ‚Äñ1 - z‚Äñ * (Œµ / 4 / M) / (1 - ‚Äñz‚Äñ) := by
        rw [tsum_geometric_of_lt_1 (by positivity) zn, ‚Üê div_eq_mul_inv]
      _ < M * (1 - ‚Äñz‚Äñ) * (Œµ / 4 / M) / (1 - ‚Äñz‚Äñ) := by gcongr; linarith only [zn]
      _ = _ := by
        rw [‚Üê mul_rotate, mul_div_cancel _ (by linarith only [zn]),
          div_mul_cancel _ (by linarith only [hM])]
  convert add_lt_add S‚ÇÅ S‚ÇÇ using 1
  linarith
