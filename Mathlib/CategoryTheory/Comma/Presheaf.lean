/-
Copyright (c) 2024 Markus Himmel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Markus Himmel
-/
import Mathlib.CategoryTheory.Comma.Over
import Mathlib.Tactic.CategoryTheory.Elementwise

/-!
# Computation of `Over A` for a presheaf `A`

Let `A : C·µí·µñ ‚•§ Type v` be a presheaf. In this file, we construct an equivalence
`e : Over A ‚âå (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v` and show that there is a quasi-commutative
diagram

```
CostructuredArrow yoneda A      ‚•§      Over A

                             ‚áò           ‚••

                               PSh(CostructuredArrow yoneda A)
```

where the top arrow is the forgetful functor forgetting the yoneda-costructure, the right arrow is
the aforementioned equivalence and the diagonal arrow is the Yoneda embedding.

In the notation of Kashiwara-Schapira, the type of the equivalence is written `C^‚Çê ‚âå C‚Çê^`, where
`¬∑‚Çê` is `CostructuredArrow` (with the functor `S` being either the identity or the Yonenda
embedding) and `^` is taking presheaves. The equivalence is a key ingredient in various results in
Kashiwara-Schapira.

The proof is somewhat long and technical, in part due to the construction inherently involving a
sigma type which comes with the usual DTT issues. However, a user of this result should not need
to interact with the actual construction, the mere existence of the equivalence and the commutative
triangle should generally be sufficient.

## Main results
* `OverEquivPresheafCostructuredArrow`:
  the equivalence `Over A ‚âå (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v`
* `CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow`: the natural isomorphism
  `CostructuredArrow.toOver yoneda A ‚ãô (OverEquivPresheafCostructuredArrow A).functor ‚âÖ yoneda`

## Implementation details



## Future work
* If needed, it should be possible to show that the equivalence is natural in `A`.

## References
* [M. Kashiwara, P. Schapira, *Categories and Sheaves*][Kashiwara2006], Lemma 1.4.12

## Tags
presheaf, over category, coyoneda

-/

namespace CategoryTheory

open Category Opposite

universe w v u

variable {C : Type u} [Category.{v} C] {A : C·µí·µñ ‚•§ Type v}

namespace OverPresheafAux

structure IsYonedaPreimage {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) {X : C} (s : yoneda.obj X ‚ü∂ A)
    (u : F.obj (op X)) : Prop where
  (app : Œ∑.app (op X) u = yonedaEquiv s)

lemma IsYonedaPreimage.map‚ÇÅ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} {Œµ : F ‚ü∂ G} (hŒµ : Œµ ‚â´ Œº = Œ∑)
    {X : C} {s : yoneda.obj X ‚ü∂ A} {u : F.obj (op X)} (h : IsYonedaPreimage Œ∑ s u) :
    IsYonedaPreimage Œº s (Œµ.app _ u) :=
  ‚ü®by rw [‚Üê elementwise_of% NatTrans.comp_app Œµ Œº, hŒµ, h.app]‚ü©

lemma IsYonedaPreimage.map‚ÇÇ {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X Y : C} (f : X ‚ü∂ Y)
    {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A} (hst : yoneda.map f ‚â´ t = s)
    {u : F.obj (op Y)} (h : IsYonedaPreimage Œ∑ t u) : IsYonedaPreimage Œ∑ s (F.map f.op u) :=
  ‚ü®by rw [elementwise_of% Œ∑.naturality, h.app, yonedaEquiv_naturality, hst]‚ü©

def YonedaPreimage {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) {X : C} (s : yoneda.obj X ‚ü∂ A) : Type v :=
  Subtype (IsYonedaPreimage Œ∑ s)

def YonedaPreimage.val {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A} :
    YonedaPreimage Œ∑ s ‚Üí F.obj (op X) :=
  Subtype.val

@[ext]
lemma YonedaPreimage.ext {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    {u v : YonedaPreimage Œ∑ s} : u.val = v.val ‚Üí u = v :=
  Subtype.ext

lemma YonedaPreimage.app_val {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    (p : YonedaPreimage Œ∑ s) : Œ∑.app _ p.val = yonedaEquiv s :=
  p.prop.app

-- def YonedaPreimage.mk {F A : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A} (u : F.obj (op X)) (hu : Œ∑.app _ u = yonedaEquiv s) : YonedaPreimage Œ∑ s :=
--   ‚ü®u, ‚ü®hu‚ü©‚ü©

-- attribute [irreducible] YonedaPreimage

@[simp]
lemma YonedaPreimage.map_val {Y : C} {Œ∑ : yoneda.obj Y ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    (p : YonedaPreimage Œ∑ s) : yoneda.map p.val ‚â´ Œ∑ = s := by
  apply yonedaEquiv.injective
  simp [yonedaEquiv_apply, yonedaEquiv_comp, yonedaEquiv_yoneda_map, p.app_val, op_unop]

def YonedaPreimage.map‚ÇÅ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} {X : C}
    {s : yoneda.obj X ‚ü∂ A} (u : YonedaPreimage Œ∑ s) (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) :
    YonedaPreimage Œº s :=
  ‚ü®Œµ.app _ u.val, IsYonedaPreimage.map‚ÇÅ hŒµ u.2‚ü©

@[simp]
lemma YonedaPreimage.map‚ÇÅ_val {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} {X : C}
    (s : yoneda.obj X ‚ü∂ A) (u : YonedaPreimage Œ∑ s) (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) :
    (u.map‚ÇÅ Œµ hŒµ).val = Œµ.app _ u.val :=
  rfl

def YonedaPreimage.map‚ÇÇ {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X Y : C} {s : yoneda.obj X ‚ü∂ A}
  {t : yoneda.obj Y ‚ü∂ A} (u : YonedaPreimage Œ∑ t) (f : X ‚ü∂ Y) (hst : yoneda.map f ‚â´ t = s) :
    YonedaPreimage Œ∑ s :=
  ‚ü®F.map f.op u.val, IsYonedaPreimage.map‚ÇÇ f hst u.2‚ü©

@[simp]
lemma YonedaPreimage.map‚ÇÇ_val {F : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {X Y : C} (f : X ‚ü∂ Y)
    {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A} (hst : yoneda.map f ‚â´ t = s)
    (u : YonedaPreimage Œ∑ t) : (u.map‚ÇÇ f hst).val = F.map f.op u.val :=
  rfl

@[simp]
lemma YonedaPreimage_map‚ÇÅ_map‚ÇÇ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) {X Y : C}
    {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A}
    (f : X ‚ü∂ Y) (hf : yoneda.map f ‚â´ t = s) (u : YonedaPreimage Œ∑ t) :
    (u.map‚ÇÅ Œµ hŒµ).map‚ÇÇ f hf = (u.map‚ÇÇ f hf).map‚ÇÅ Œµ hŒµ :=
  YonedaPreimage.ext <| (elementwise_of% (Œµ.naturality f.op).symm) u.val

@[simps (config := { fullyApplied := false }) obj map]
def yonedaPreimageFunctor' {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v where
  obj s := YonedaPreimage Œ∑ s.unop.hom
  map f u := u.map‚ÇÇ f.unop.left f.unop.w

@[simps]
def yonedaPreimageFunctor'_map‚ÇÅ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) :
    yonedaPreimageFunctor' Œ∑ ‚ü∂ yonedaPreimageFunctor' Œº where
  app s u := u.map‚ÇÅ Œµ hŒµ

@[simps]
def yonedaPreimageFunctor (A : C·µí·µñ ‚•§ Type v) : Over A ‚•§ (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v where
  obj Œ∑ := yonedaPreimageFunctor' Œ∑.hom
  map Œµ := yonedaPreimageFunctor'_map‚ÇÅ Œµ.left Œµ.w

def yonedaPreimageCostructuredArrow (A : C·µí·µñ ‚•§ Type v) (s t : CostructuredArrow yoneda A) :
    YonedaPreimage s.hom t.hom ‚âÖ t ‚ü∂ s :=
  ‚ü®fun p => CostructuredArrow.homMk p.val (by aesop_cat), fun f => ‚ü®f.left, ‚ü®by
    have := f.w
    dsimp at this
    rw [Category.comp_id] at this
    rw [‚Üê this, ‚Üê yonedaEquiv_naturality]
    dsimp [yonedaEquiv_apply]
    have := congrFun (s.hom.naturality f.left.op) (ùüô s.left)
    dsimp at this
    rw [‚Üê this, Category.comp_id]
  ‚ü©‚ü©, by aesop_cat, by aesop_cat‚ü©

@[simps!]
def yonedaCompYonedaPreimageFunctor (A : C·µí·µñ ‚•§ Type v) :
    CostructuredArrow.toOver yoneda A ‚ãô yonedaPreimageFunctor A ‚âÖ yoneda :=
  NatIso.ofComponents (fun s => by
    refine' NatIso.ofComponents (fun t => yonedaPreimageCostructuredArrow _ _ _) _
    aesop_cat
  ) (by aesop_cat)

def YonedaCollection (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (X : C) :
    Type v :=
  Œ£ (s : A.obj (op X)), F.obj (op (CostructuredArrow.mk (yonedaEquiv.symm s)))

def YonedaCollection.mk {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    {X : C} (s : A.obj (op X)) (x : F.obj (op (CostructuredArrow.mk (yonedaEquiv.symm s)))) :
    YonedaCollection F X :=
  ‚ü®s, x‚ü©

def YonedaCollection.mk' {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    {X : C} (s : yoneda.obj X ‚ü∂ A) (x : F.obj (op (CostructuredArrow.mk s))) :
    YonedaCollection F X := ‚ü®yonedaEquiv s, F.map (eqToHom <| by rw [Equiv.symm_apply_apply]) x‚ü©

def YonedaCollection.fst {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    {X : C} (p : YonedaCollection F X) : A.obj (op X) := p.1

def YonedaCollection.snd {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    {X : C} (p : YonedaCollection F X) :
    F.obj (op (CostructuredArrow.mk (yonedaEquiv.symm p.fst))) := p.2

def YonedaCollection.fst' {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    {X : C} (p : YonedaCollection F X) : yoneda.obj X ‚ü∂ A :=
  yonedaEquiv.symm p.fst

def YonedaCollection.snd' {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    {X : C} (p : YonedaCollection F X) : F.obj (op (CostructuredArrow.mk p.fst')) :=
  p.snd

lemma YonedaCollection.fst_eq_yonedEquiv_fst'
    {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} {X : C} (p : YonedaCollection F X) :
    p.fst = yonedaEquiv p.fst' :=
  (Equiv.apply_symm_apply _ _).symm

@[simp]
lemma YonedaCollection.mk'_fst' {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    {X : C} (s : yoneda.obj X ‚ü∂ A) (x : F.obj (op (CostructuredArrow.mk s))) :
    (YonedaCollection.mk' s x).fst' = s :=
  Equiv.apply_symm_apply _ _

@[simp]
lemma YonedaCollection.mk'_snd' {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    {X : C} (s : yoneda.obj X ‚ü∂ A) (x : F.obj (op (CostructuredArrow.mk s))) :
    (YonedaCollection.mk' s x).snd' = F.map (eqToHom <| by rw [YonedaCollection.mk'_fst']) x := rfl

@[ext]
lemma YonedaCollection.ext' {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    {X : C} (p q : YonedaCollection F X) : (h : p.fst' = q.fst') ‚Üí F.map (eqToHom <| by rw [h]) q.snd' = p.snd' ‚Üí p = q := by
  -- TODO: Clean up this proof
  intro h h'
  rcases p with ‚ü®p, p'‚ü©
  rcases q with ‚ü®q, q'‚ü©
  obtain rfl : p = q := yonedaEquiv.symm.injective h
  apply Sigma.ext
  ¬∑ rfl
  ¬∑ rw [heq_eq_eq]
    convert h'.symm
    simp [snd']
    rfl

def YonedaCollection.map‚ÇÅ {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    (Œ∑ : F ‚ü∂ G) {X : C} : YonedaCollection F X ‚Üí YonedaCollection G X := fun p =>
  YonedaCollection.mk' p.fst' (Œ∑.app _ p.snd')

@[simp]
lemma YonedaCollection.map‚ÇÅ_fst' {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    (Œ∑ : F ‚ü∂ G) {X : C} (p : YonedaCollection F X) : (YonedaCollection.map‚ÇÅ Œ∑ p).fst' = p.fst' := by
  simp [map‚ÇÅ]

@[simp]
lemma YonedaCollection.map‚ÇÅ_snd' {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    (Œ∑ : F ‚ü∂ G) {X : C} (p : YonedaCollection F X) :
    (YonedaCollection.map‚ÇÅ Œ∑ p).snd' = G.map (eqToHom (by rw [YonedaCollection.map‚ÇÅ_fst'])) (Œ∑.app _ p.snd') := by
  simp [map‚ÇÅ]

@[simp]
lemma YonedaCollection.map‚ÇÅ_fst {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    (Œ∑ : F ‚ü∂ G) {X : C} (p : YonedaCollection F X) :
    (YonedaCollection.map‚ÇÅ Œ∑ p).fst = p.fst := by
  simp only [YonedaCollection.fst_eq_yonedEquiv_fst', map‚ÇÅ_fst']

def YonedaCollection.map‚ÇÇ (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) {X Y : C}
    (f : X ‚ü∂ Y) : YonedaCollection F Y ‚Üí YonedaCollection F X := fun p =>
  YonedaCollection.mk' (yoneda.map f ‚â´ p.fst') $ F.map (Quiver.Hom.op (CostructuredArrow.homMk'' p.fst' f)) p.snd'

@[simp]
lemma YonedaCollection.map‚ÇÇ_fst' (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) {X Y : C}
    (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    (YonedaCollection.map‚ÇÇ F f p).fst' = yoneda.map f ‚â´ p.fst' :=
  by simp [map‚ÇÇ]

@[simp]
lemma YonedaCollection.map‚ÇÇ_fst (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) {X Y : C}
    (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    (YonedaCollection.map‚ÇÇ F f p).fst = A.map f.op p.fst := by
  simp only [YonedaCollection.fst_eq_yonedEquiv_fst', map‚ÇÇ_fst', yonedaEquiv_naturality]

@[simp]
lemma YonedaCollection.map‚ÇÇ_snd' (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) {X Y : C}
    (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    (YonedaCollection.map‚ÇÇ F f p).snd' = F.map (Quiver.Hom.op (CostructuredArrow.homMk'' p.fst' f) ‚â´ eqToHom (by rw [YonedaCollection.map‚ÇÇ_fst' F f])) p.snd' := by
  simp [map‚ÇÇ]

@[simp]
lemma bla {F : C ‚•§ Type w} {X Y Z : C} (h‚ÇÅ : X = Y) (h‚ÇÇ : Y = Z) (x : F.obj X) :
  F.map (eqToHom h‚ÇÇ) (F.map (eqToHom h‚ÇÅ) x) = F.map (eqToHom (h‚ÇÅ.trans h‚ÇÇ)) x :=
  by aesop_cat

attribute [simp] CostructuredArrow.homMk''_id

@[simp]
lemma YonedaCollection.map‚ÇÇ_id {A : C·µí·µñ ‚•§ Type v} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} {X : C} :
    YonedaCollection.map‚ÇÇ F (ùüô X) = id := by
  ext p
  ¬∑ simp
  ¬∑ simp

-- How does simp even know how to apply this
@[simp]
lemma blubb {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} {X Y : C} {f : X ‚ü∂ Y}
    {g g' : yoneda.obj Y ‚ü∂ A} (h : g = g') {x : F.obj (op (CostructuredArrow.mk g'))} :
  F.map (CostructuredArrow.homMk'' g f).op (F.map (eqToHom (by rw [h])) x) = F.map (eqToHom (by rw [h])) (F.map (CostructuredArrow.homMk'' g' f).op x)
   := by aesop_cat

attribute [simp] CostructuredArrow.homMk''_comp

@[simp]
lemma YonedaCollection.map‚ÇÇ_comp {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} {X Y Z : C}
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : YonedaCollection.map‚ÇÇ F (f ‚â´ g) = YonedaCollection.map‚ÇÇ F f ‚àò YonedaCollection.map‚ÇÇ F g := by
  ext p
  ¬∑ simp
  ¬∑ simp

@[simp]
lemma YonedaCollection.map‚ÇÅ_map‚ÇÇ {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
  (Œ∑ : F ‚ü∂ G) {X Y : C} (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    YonedaCollection.map‚ÇÇ G f (YonedaCollection.map‚ÇÅ Œ∑ p) = YonedaCollection.map‚ÇÅ Œ∑ (YonedaCollection.map‚ÇÇ F f p) := by
  ext
  ¬∑ simp
  ¬∑ simp [FunctorToTypes.naturality]

@[simp]
lemma YonedaCollection.map‚ÇÅ_id {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} {X : C} :
  YonedaCollection.map‚ÇÅ (ùüô F) (X := X) = id := by aesop_cat

@[simp]
lemma YonedaCollection.map‚ÇÅ_comp {F G H : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v}
    (Œ∑ : F ‚ü∂ G) (Œº : G ‚ü∂ H) {X : C} :
    YonedaCollection.map‚ÇÅ (Œ∑ ‚â´ Œº) (X := X) = YonedaCollection.map‚ÇÅ Œº (X := X) ‚àò YonedaCollection.map‚ÇÅ Œ∑ (X := X) := by
  ext
  ¬∑ simp
  ¬∑ simp [FunctorToTypes.naturality]

@[simps (config := { fullyApplied := false })]
def YonedaCollectionFunctor' (A : C·µí·µñ ‚•§ Type v) (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) :
    C·µí·µñ ‚•§ Type v where
  obj X := YonedaCollection F X.unop
  map f := YonedaCollection.map‚ÇÇ F f.unop

@[simps]
def YonedaCollectionMap {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G) :
    YonedaCollectionFunctor' A F ‚ü∂ YonedaCollectionFunctor' A G where
  app X := YonedaCollection.map‚ÇÅ Œ∑
  naturality := by
    intros
    ext
    simp

@[simps (config := { fullyApplied := false }) obj map]
def YonedaCollectionFunctor (A : C·µí·µñ ‚•§ Type v) : ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) ‚•§ C·µí·µñ ‚•§ Type v where
  obj := YonedaCollectionFunctor' A
  map Œ∑ := YonedaCollectionMap Œ∑

@[simps (config := { fullyApplied := false }) app]
def YonedaCollectionFunctorToA (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) :
    YonedaCollectionFunctor' A F ‚ü∂ A where
  app X := YonedaCollection.fst

@[simps! (config := { fullyApplied := false }) obj map]
def YonedaCollectionTotal (A : C·µí·µñ ‚•§ Type v) :
    ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) ‚•§ Over A :=
  (YonedaCollectionFunctor A).toOver _ (YonedaCollectionFunctorToA) (by aesop_cat)

def ax {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) :
    YonedaCollection (yonedaPreimageFunctor' Œ∑) X ‚Üí F.obj (op X) :=
  fun p => p.snd'.val

@[simp]
lemma ax_naturality‚ÇÅ {F G : C·µí·µñ ‚•§ Type v} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) (X : C) (p : YonedaCollection (yonedaPreimageFunctor' Œ∑) X) :
    ax Œº X (p.map‚ÇÅ (yonedaPreimageFunctor'_map‚ÇÅ Œµ hŒµ)) = Œµ.app _ (ax Œ∑ X p) := by
  simp [ax]

@[simp]
lemma ax_naturality‚ÇÇ {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X Y : C) (f : X ‚ü∂ Y) (p : YonedaCollection (yonedaPreimageFunctor' Œ∑) Y) :
    ax Œ∑ X (YonedaCollection.map‚ÇÇ (yonedaPreimageFunctor' Œ∑) f p) = F.map f.op (ax Œ∑ Y p) := by
  simp [ax]

@[simp]
lemma app_ax {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C·µí·µñ) (p : YonedaCollection (yonedaPreimageFunctor' Œ∑) X.unop) :
    Œ∑.app X (ax Œ∑ X.unop p) = p.fst := by
  simp [ax]
  have := p.snd'.app_val
  dsimp  at this
  simp [ this, YonedaCollection.fst_eq_yonedEquiv_fst']

def back {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) :
    F.obj (op X) ‚Üí YonedaCollection (yonedaPreimageFunctor' Œ∑) X :=
  fun x => YonedaCollection.mk' (yonedaEquiv.symm (Œ∑.app _ x)) ‚ü®x, ‚ü®by aesop_cat‚ü©‚ü©

lemma ax_back {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) : ax Œ∑ X ‚àò back Œ∑ X = id := by
  ext x
  dsimp [ax, back]
  aesop_cat

lemma back_ax {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) : back Œ∑ X ‚àò ax Œ∑ X = id := by
  ext1 p
  simp [ax, back]
  refine' YonedaCollection.ext' _ _ _ _
  ¬∑ have := p.snd'.app_val
    dsimp at this
    dsimp
    simp [this]
  ¬∑ apply YonedaPreimage.ext
    aesop_cat

@[simps]
def bij {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) (X : C) :
    YonedaCollection (yonedaPreimageFunctor' Œ∑) X ‚âÖ F.obj (op X) where
  hom := ax Œ∑ X
  inv := back Œ∑ X
  hom_inv_id := back_ax Œ∑ X
  inv_hom_id := ax_back Œ∑ X

@[simps!]
def unit‚ÇÄ {F : C·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ A) : YonedaCollectionFunctor' A (yonedaPreimageFunctor' Œ∑) ‚âÖ F :=
  NatIso.ofComponents (fun X => bij Œ∑ X.unop) (by aesop_cat)

@[simps!]
def unit_pt (Œ∑ : Over A) : (yonedaPreimageFunctor A ‚ãô YonedaCollectionTotal A).obj Œ∑ ‚âÖ Œ∑ :=
  Over.isoMk (unit‚ÇÄ Œ∑.hom) (by aesop_cat)

def unit (A : C·µí·µñ ‚•§ Type v) : yonedaPreimageFunctor A ‚ãô YonedaCollectionTotal A ‚âÖ ùü≠ (Over A) :=
  NatIso.ofComponents unit_pt (by aesop_cat)

@[simp]
lemma val_fst' (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (X : C)
    (s : yoneda.obj X ‚ü∂ A) (p : YonedaPreimage (YonedaCollectionFunctorToA F) s) : p.val.fst' = s := by
  simpa [YonedaCollection.fst_eq_yonedEquiv_fst'] using p.app_val

def cofo (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s : CostructuredArrow yoneda A) :
    F.obj (op s) ‚Üí YonedaPreimage (YonedaCollectionFunctorToA F) s.hom :=
  fun x => ‚ü®YonedaCollection.mk' s.hom x, ‚ü®by simp [YonedaCollection.fst_eq_yonedEquiv_fst']‚ü©‚ü©

@[simp]
lemma cofo_naturality‚ÇÅ {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v} (Œ∑ : F ‚ü∂ G)
    (s : (CostructuredArrow yoneda A)·µí·µñ) (x : F.obj s) : cofo G s.unop (Œ∑.app s x) = YonedaPreimage.map‚ÇÅ (cofo F s.unop x) (YonedaCollectionMap Œ∑) (by aesop_cat) := by
  dsimp [cofo]
  apply YonedaPreimage.ext
  simp
  refine' YonedaCollection.ext' _ _ _ _
  ¬∑ simp
  ¬∑ simp
    erw [YonedaCollection.mk'_snd']
    erw [YonedaCollection.mk'_snd']
    exact FunctorToTypes.naturality _ _ _ _ _

lemma bloink (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s t : CostructuredArrow yoneda A)
    (f : s ‚ü∂ t) (x : F.obj (op t)) : (F.map (CostructuredArrow.homMk'' t.hom f.left).op x) = F.map (eqToHom <| by simp [‚Üê CostructuredArrow.eq_mk]) (F.map f.op x) := by
  have : (CostructuredArrow.homMk'' t.hom f.left).op = f.op ‚â´ eqToHom (by simp [‚Üê CostructuredArrow.eq_mk]) := by
    apply Quiver.Hom.unop_inj
    aesop_cat
  erw [this]
  simp

@[simp]
lemma cofo_naturality‚ÇÇ (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s t : (CostructuredArrow yoneda A)·µí·µñ)
    (f : t ‚ü∂ s) (x : F.obj t) : cofo F s.unop (F.map f x) = YonedaPreimage.map‚ÇÇ (cofo F t.unop x) f.unop.left (by simp) := by
  simp [cofo]
  apply YonedaPreimage.ext
  rw [YonedaPreimage.map‚ÇÇ_val]
  refine' YonedaCollection.ext' _ _ _ _
  ¬∑ simp only [Opposite.unop_op, YonedaCollectionFunctor'_obj, val_fst',
    YonedaCollectionFunctor'_map, Quiver.Hom.unop_op, YonedaCollection.map‚ÇÇ_fst', CommaMorphism.w,
    Functor.const_obj_obj, CostructuredArrow.right_eq_id, Functor.const_obj_map, comp_id]
  ¬∑ erw [YonedaCollection.mk'_snd']
    erw [YonedaCollection.mk'_snd']
    erw [YonedaCollection.mk'_snd']
    simp only [Opposite.unop_op, YonedaCollectionFunctor'_obj, YonedaCollectionFunctor'_map,
      Quiver.Hom.unop_op, id_eq, eq_mpr_eq_cast, val_fst', blubb, bla]
    erw [bloink]
    simp

def coba (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s : CostructuredArrow yoneda A) :
    YonedaPreimage (YonedaCollectionFunctorToA F) s.hom ‚Üí F.obj (op s) :=
  fun p => F.map (eqToHom (by simp [val_fst', ‚Üê CostructuredArrow.eq_mk])) p.val.snd'

lemma cofo_coba {A : C·µí·µñ ‚•§ Type v} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s : CostructuredArrow yoneda A) :
    cofo F s ‚àò coba F s = id := by
  ext p
  dsimp [cofo, coba]
  change YonedaCollection.mk' _ _ = _
  refine' YonedaCollection.ext' _ _ _ _
  ¬∑ simp
  ¬∑ simp

lemma coba_cofo (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s : CostructuredArrow yoneda A) :
    coba F s ‚àò cofo F s = id := by
  ext x
  dsimp [cofo, coba]
  erw [YonedaCollection.mk'_snd']
  simp

@[simps]
def cobij (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) (s : CostructuredArrow yoneda A) :
    F.obj (op s) ‚âÖ YonedaPreimage (YonedaCollectionFunctorToA F) s.hom where
  hom := cofo F s
  inv := coba F s
  hom_inv_id := coba_cofo F s
  inv_hom_id := cofo_coba F s

@[simps! (config := { fullyApplied := false }) hom]
def counit‚ÇÄ (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) :
    F ‚âÖ yonedaPreimageFunctor' (YonedaCollectionFunctorToA F) :=
  NatIso.ofComponents (fun s => cobij F s.unop) (by aesop_cat)

def counit (A : C·µí·µñ ‚•§ Type v) : ùü≠ ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) ‚âÖ (YonedaCollectionTotal A ‚ãô yonedaPreimageFunctor A) :=
  NatIso.ofComponents counit‚ÇÄ (by aesop_cat)

end OverPresheafAux

/-- If `A : C·µí·µñ ‚•§ Type v` is a presheaf, then we have an equivalence between presheaves lying over
    `A` and the category of presheaves on `CostructuredArrow yoneda A`. There is a quasicommutative
    triangle involving this equivalence, see
    `CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow`.

    This is Lemma 1.4.12 in [Kashiwara2006]. -/
def OverEquivPresheafCostructuredArrow (A : C·µí·µñ ‚•§ Type v) :
    Over A ‚âå ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v) :=
  Equivalence.mk (OverPresheafAux.yonedaPreimageFunctor A) (OverPresheafAux.YonedaCollectionTotal A)
    (OverPresheafAux.unit A).symm (OverPresheafAux.counit A).symm

/-- If `A : C·µí·µñ ‚•§ Type v` is a presheaf, then the Yoneda embedding for
    `CostructuredArrow yoneda A` factors through `Over A` via a forgetful functor and an
    equivalence.

    This is Lemma 1.4.12 in [Kashiwara2006]. -/
def CostructuredArrow.toOverCompOverEquivPresheafCostructuredArrow (A : C·µí·µñ ‚•§ Type v) :
    CostructuredArrow.toOver yoneda A ‚ãô (OverEquivPresheafCostructuredArrow A).functor ‚âÖ yoneda :=
  OverPresheafAux.yonedaCompYonedaPreimageFunctor A

end CategoryTheory
