/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import Mathlib.CategoryTheory.Adjunction.Limits
import Mathlib.CategoryTheory.Adjunction.Opposites
import Mathlib.CategoryTheory.Elements
import Mathlib.CategoryTheory.Limits.ConeCategory
import Mathlib.CategoryTheory.Limits.Final
import Mathlib.CategoryTheory.Limits.FunctorCategory
import Mathlib.CategoryTheory.Limits.KanExtension
import Mathlib.CategoryTheory.Limits.Shapes.Terminal
import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.CategoryTheory.Limits.Shapes.Types
import Mathlib.CategoryTheory.Limits.Over
import Mathlib.CategoryTheory.Limits.EssentiallySmall

#align_import category_theory.limits.presheaf from "leanprover-community/mathlib"@"70fd9563a21e7b963887c9360bd29b2393e6225a"

/-!
# Colimit of representables

This file constructs an adjunction `yonedaAdjunction` between `(C·µí·µñ ‚•§ Type u)` and `‚Ñ∞` given a
functor `A : C ‚•§ ‚Ñ∞`, where the right adjoint sends `(E : ‚Ñ∞)` to `c ‚Ü¶ (A.obj c ‚ü∂ E)` (provided `‚Ñ∞`
has colimits).

This adjunction is used to show that every presheaf is a colimit of representables. This result is
also known as the density theorem, the co-Yoneda lemma and the Ninja Yoneda lemma.

Further, the left adjoint `colimitAdj.extendAlongYoneda : (C·µí·µñ ‚•§ Type u) ‚•§ ‚Ñ∞` satisfies
`yoneda ‚ãô L ‚âÖ A`, that is, an extension of `A : C ‚•§ ‚Ñ∞` to `(C·µí·µñ ‚•§ Type u) ‚•§ ‚Ñ∞` through
`yoneda : C ‚•§ C·µí·µñ ‚•§ Type u`. It is the left Kan extension of `A` along the yoneda embedding,
sometimes known as the Yoneda extension, as proved in `extendAlongYonedaIsoKan`.

`uniqueExtensionAlongYoneda` shows `extendAlongYoneda` is unique amongst cocontinuous functors
with this property, establishing the presheaf category as the free cocompletion of a small category.

We also give a direct pedestrian proof that every presheaf is a colimit of representables. This
version of the proof is valid for any category `C`, even if it is not small.

## Tags
colimit, representable, presheaf, free cocompletion

## References
* [S. MacLane, I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
* https://ncatlab.org/nlab/show/Yoneda+extension
-/

set_option autoImplicit true


namespace CategoryTheory

open Category Limits

universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

section SmallCategory

variable {C : Type u‚ÇÅ} [SmallCategory C]

variable {‚Ñ∞ : Type u‚ÇÇ} [Category.{u‚ÇÅ} ‚Ñ∞]

variable (A : C ‚•§ ‚Ñ∞)

namespace ColimitAdj

/--
The functor taking `(E : ‚Ñ∞) (c : C·µí·µñ)` to the homset `(A.obj C ‚ü∂ E)`. It is shown in `L_adjunction`
that this functor has a left adjoint (provided `E` has colimits) given by taking colimits over
categories of elements.
In the case where `‚Ñ∞ = C·µí·µñ ‚•§ Type u` and `A = yoneda`, this functor is isomorphic to the identity.

Defined as in [MM92], Chapter I, Section 5, Theorem 2.
-/
@[simps!]
def restrictedYoneda : ‚Ñ∞ ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ :=
  yoneda ‚ãô (whiskeringLeft _ _ (Type u‚ÇÅ)).obj (Functor.op A)
#align category_theory.colimit_adj.restricted_yoneda CategoryTheory.ColimitAdj.restrictedYoneda

/--
The functor `restrictedYoneda` is isomorphic to the identity functor when evaluated at the yoneda
embedding.
-/
def restrictedYonedaYoneda : restrictedYoneda (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚âÖ ùü≠ _ :=
  NatIso.ofComponents fun P =>
    NatIso.ofComponents (fun X => yonedaSectionsSmall X.unop _) @ fun X Y f =>
      funext fun x => by
        dsimp
        have : x.app X (CategoryStruct.id (Opposite.unop X)) =
            (x.app X (ùüô (Opposite.unop X))) := rfl
        rw [this]
        rw [‚Üê FunctorToTypes.naturality _ _ x f (ùüô _)]
        simp only [id_comp, Functor.op_obj, Opposite.unop_op, yoneda_obj_map, comp_id]
#align category_theory.colimit_adj.restricted_yoneda_yoneda CategoryTheory.ColimitAdj.restrictedYonedaYoneda

/-- (Implementation). The equivalence of homsets which helps construct the left adjoint to
`colimitAdj.restrictedYoneda`.
It is shown in `restrictYonedaHomEquivNatural` that this is a natural bijection.
-/
def restrictYonedaHomEquiv (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E : ‚Ñ∞)
    {c : Cocone ((CategoryOfElements.œÄ P).leftOp ‚ãô A)} (t : IsColimit c) :
    (c.pt ‚ü∂ E) ‚âÉ (P ‚ü∂ (restrictedYoneda A).obj E) :=
  ((uliftTrivial _).symm ‚â™‚â´ t.homIso' E).toEquiv.trans
    { toFun := fun k =>
        { app := fun c p => k.1 (Opposite.op ‚ü®_, p‚ü©)
          naturality := fun c c' f =>
            funext fun p =>
              (k.2
                  (Quiver.Hom.op ‚ü®f, rfl‚ü© :
                    (Opposite.op ‚ü®c', P.map f p‚ü© : P.Elements·µí·µñ) ‚ü∂ Opposite.op ‚ü®c, p‚ü©)).symm }
      invFun := fun œÑ =>
        { val := fun p => œÑ.app p.unop.1 p.unop.2
          property := @fun p p' f => by
            simp_rw [‚Üê f.unop.2]
            apply (congr_fun (œÑ.naturality f.unop.1) p'.unop.2).symm }
      left_inv := by
        rintro ‚ü®k‚ÇÅ, k‚ÇÇ‚ü©
        ext
        dsimp
        congr 1
      right_inv := by
        rintro ‚ü®_, _‚ü©
        rfl }
#align category_theory.colimit_adj.restrict_yoneda_hom_equiv CategoryTheory.ColimitAdj.restrictYonedaHomEquiv

/--
(Implementation). Show that the bijection in `restrictYonedaHomEquiv` is natural (on the right).
-/
theorem restrictYonedaHomEquiv_natural (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E‚ÇÅ E‚ÇÇ : ‚Ñ∞) (g : E‚ÇÅ ‚ü∂ E‚ÇÇ) {c : Cocone _}
    (t : IsColimit c) (k : c.pt ‚ü∂ E‚ÇÅ) :
    restrictYonedaHomEquiv A P E‚ÇÇ t (k ‚â´ g) =
      restrictYonedaHomEquiv A P E‚ÇÅ t k ‚â´ (restrictedYoneda A).map g := by
  ext x X
  apply (assoc _ _ _).symm
#align category_theory.colimit_adj.restrict_yoneda_hom_equiv_natural CategoryTheory.ColimitAdj.restrictYonedaHomEquiv_natural

variable [HasColimits ‚Ñ∞]

/--
The left adjoint to the functor `restrictedYoneda` (shown in `yonedaAdjunction`). It is also an
extension of `A` along the yoneda embedding (shown in `isExtensionAlongYoneda`), in particular
it is the left Kan extension of `A` through the yoneda embedding.
-/
noncomputable def extendAlongYoneda : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞ :=
  Adjunction.leftAdjointOfEquiv (fun P E => restrictYonedaHomEquiv A P E (colimit.isColimit _))
    fun P E E' g => restrictYonedaHomEquiv_natural A P E E' g _
#align category_theory.colimit_adj.extend_along_yoneda CategoryTheory.ColimitAdj.extendAlongYoneda

@[simp]
theorem extendAlongYoneda_obj (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
    (extendAlongYoneda A).obj P = colimit ((CategoryOfElements.œÄ P).leftOp ‚ãô A) :=
  rfl
#align category_theory.colimit_adj.extend_along_yoneda_obj CategoryTheory.ColimitAdj.extendAlongYoneda_obj

-- porting note: adding this lemma because lean 4 ext no longer applies all ext lemmas when
-- stuck (and hence can see through definitional equalities). The previous lemma shows that
-- `(extendAlongYoneda A).obj P` is definitionally a colimit, and the ext lemma is just
-- a special case of `CategoryTheory.Limits.colimit.hom_ext`.
-- See https://github.com/leanprover-community/mathlib4/issues/5229
@[ext] lemma extendAlongYoneda_obj.hom_ext {P : C·µí·µñ ‚•§ Type u‚ÇÅ}
    {f f' : (extendAlongYoneda A).obj P ‚ü∂ X}
    (w : ‚àÄ j, colimit.Œπ ((CategoryOfElements.œÄ P).leftOp ‚ãô A) j ‚â´ f =
      colimit.Œπ ((CategoryOfElements.œÄ P).leftOp ‚ãô A) j ‚â´ f') : f = f' :=
CategoryTheory.Limits.colimit.hom_ext w

theorem extendAlongYoneda_map {X Y : C·µí·µñ ‚•§ Type u‚ÇÅ} (f : X ‚ü∂ Y) :
    (extendAlongYoneda A).map f =
      colimit.pre ((CategoryOfElements.œÄ Y).leftOp ‚ãô A) (CategoryOfElements.map f).op := by
  ext J
  erw [colimit.Œπ_pre ((CategoryOfElements.œÄ Y).leftOp ‚ãô A) (CategoryOfElements.map f).op]
  dsimp only [extendAlongYoneda, restrictYonedaHomEquiv, IsColimit.homIso', IsColimit.homIso,
    uliftTrivial]
  -- porting note: in mathlib3 the rest of the proof was `simp, refl`; this is squeezed
  -- and appropriately reordered, presumably because of a non-confluence issue.
  simp only [Adjunction.leftAdjointOfEquiv_map, Iso.symm_mk, Iso.toEquiv_comp, Equiv.coe_trans,
    Equiv.coe_fn_mk, Iso.toEquiv_fun, Equiv.symm_trans_apply, Equiv.coe_fn_symm_mk,
    Iso.toEquiv_symm_fun, id.def, colimit.isColimit_desc, colimit.Œπ_desc, FunctorToTypes.comp,
    Cocone.extend_Œπ, Cocone.extensions_app, Functor.map_id, Category.comp_id, colimit.cocone_Œπ]
  simp only [Functor.comp_obj, Functor.leftOp_obj, CategoryOfElements.œÄ_obj, colimit.cocone_x,
    Functor.comp_map, Functor.leftOp_map, CategoryOfElements.œÄ_map, Opposite.unop_op,
    Adjunction.leftAdjointOfEquiv_obj, Function.comp_apply, Functor.map_id, comp_id,
    colimit.cocone_Œπ, Functor.op_obj]
  rfl
#align category_theory.colimit_adj.extend_along_yoneda_map CategoryTheory.ColimitAdj.extendAlongYoneda_map

/-- Show `extendAlongYoneda` is left adjoint to `restrictedYoneda`.

The construction of [MM92], Chapter I, Section 5, Theorem 2.
-/
noncomputable def yonedaAdjunction : extendAlongYoneda A ‚ä£ restrictedYoneda A :=
  Adjunction.adjunctionOfEquivLeft _ _
#align category_theory.colimit_adj.yoneda_adjunction CategoryTheory.ColimitAdj.yonedaAdjunction

/--
The initial object in the category of elements for a representable functor. In `isInitial` it is
shown that this is initial.
-/
def Elements.initial (A : C) : (yoneda.obj A).Elements :=
  ‚ü®Opposite.op A, ùüô _‚ü©
#align category_theory.colimit_adj.elements.initial CategoryTheory.ColimitAdj.Elements.initial

/-- Show that `Elements.initial A` is initial in the category of elements for the `yoneda` functor.
-/
def isInitial (A : C) : IsInitial (Elements.initial A) where
  desc s := ‚ü®s.pt.2.op, comp_id _‚ü©
  uniq s m _ := by
    simp_rw [‚Üê m.2]
    dsimp [Elements.initial]
    simp
  fac := by rintro s ‚ü®‚ü®‚ü©‚ü©
#align category_theory.colimit_adj.is_initial CategoryTheory.ColimitAdj.isInitial

/--
`extendAlongYoneda A` is an extension of `A` to the presheaf category along the yoneda embedding.
`uniqueExtensionAlongYoneda` shows it is unique among functors preserving colimits with this
property (up to isomorphism).

The first part of [MM92], Chapter I, Section 5, Corollary 4.
See Property 1 of <https://ncatlab.org/nlab/show/Yoneda+extension#properties>.
-/
noncomputable def isExtensionAlongYoneda :
    (yoneda : C ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ) ‚ãô extendAlongYoneda A ‚âÖ A :=
  NatIso.ofComponents
    (fun X =>
      (colimit.isColimit _).coconePointUniqueUpToIso
        (colimitOfDiagramTerminal (terminalOpOfInitial (isInitial _)) _))
    (by
      intro X Y f
      -- porting note: this is slightly different to the `change` in mathlib3 which
      -- didn't work
      change (colimit.desc _ _ ‚â´ _) = colimit.desc _ _ ‚â´ _
      ext
      rw [colimit.Œπ_desc_assoc, colimit.Œπ_desc_assoc]
      change (colimit.Œπ _ _ ‚â´ ùüô _) ‚â´ colimit.desc _ _ = _
      rw [comp_id, colimit.Œπ_desc]
      dsimp
      rw [‚Üê A.map_comp]
      congr 1)
#align category_theory.colimit_adj.is_extension_along_yoneda CategoryTheory.ColimitAdj.isExtensionAlongYoneda

/-- See Property 2 of https://ncatlab.org/nlab/show/Yoneda+extension#properties. -/
noncomputable instance : PreservesColimits (extendAlongYoneda A) :=
  (yonedaAdjunction A).leftAdjointPreservesColimits

/-- Show that the images of `X` after `extendAlongYoneda` and `Lan yoneda` are indeed isomorphic.
This follows from `CategoryTheory.CategoryOfElements.costructuredArrowYonedaEquivalence`.
-/
@[simps]
noncomputable def extendAlongYonedaIsoKanApp (X) :
    (extendAlongYoneda A).obj X ‚âÖ ((lan yoneda : (_ ‚•§ ‚Ñ∞) ‚•§ _).obj A).obj X :=
  let eq := CategoryOfElements.costructuredArrowYonedaEquivalence X
  { hom := colimit.pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) eq.functor
    inv := colimit.pre ((CategoryOfElements.œÄ X).leftOp ‚ãô A) eq.inverse
    hom_inv_id := by
      erw [colimit.pre_pre ((CategoryOfElements.œÄ X).leftOp ‚ãô A) eq.inverse]
      trans colimit.pre ((CategoryOfElements.œÄ X).leftOp ‚ãô A) (ùü≠ _)
      congr
      ¬∑ exact congr_arg Functor.op (CategoryOfElements.from_toCostructuredArrow_eq X)
      ¬∑ ext
        simp only [colimit.Œπ_pre]
        erw [Category.comp_id]
        congr
    inv_hom_id := by
      erw [colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) eq.functor]
      trans colimit.pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A X) (ùü≠ _)
      congr
      ¬∑ exact CategoryOfElements.to_fromCostructuredArrow_eq X
      ¬∑ ext
        simp only [colimit.Œπ_pre]
        erw [Category.comp_id]
        congr }
set_option linter.uppercaseLean3 false in
#align category_theory.colimit_adj.extend_along_yoneda_iso_Kan_app CategoryTheory.ColimitAdj.extendAlongYonedaIsoKanApp

/-- Verify that `extendAlongYoneda` is indeed the left Kan extension along the yoneda embedding.
-/
@[simps!]
noncomputable def extendAlongYonedaIsoKan :
    extendAlongYoneda A ‚âÖ (lan yoneda : (_ ‚•§ ‚Ñ∞) ‚•§ _).obj A :=
  NatIso.ofComponents (extendAlongYonedaIsoKanApp A) (by
    intro X Y f; simp
    rw [extendAlongYoneda_map]
    erw [colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A Y) (CostructuredArrow.map f)]
    erw [colimit.pre_pre (Lan.diagram (yoneda : C ‚•§ _ ‚•§ Type u‚ÇÅ) A Y)
        (CategoryOfElements.costructuredArrowYonedaEquivalence Y).functor]
    congr 1
    apply CategoryOfElements.costructuredArrow_yoneda_equivalence_naturality)
set_option linter.uppercaseLean3 false in
#align category_theory.colimit_adj.extend_along_yoneda_iso_Kan CategoryTheory.ColimitAdj.extendAlongYonedaIsoKan

/-- extending `F ‚ãô yoneda` along the yoneda embedding is isomorphic to `Lan F.op`. -/
noncomputable def extendOfCompYonedaIsoLan {D : Type u‚ÇÅ} [SmallCategory D] (F : C ‚•§ D) :
    extendAlongYoneda (F ‚ãô yoneda) ‚âÖ lan F.op :=
  Adjunction.natIsoOfRightAdjointNatIso (yonedaAdjunction (F ‚ãô yoneda))
    (Lan.adjunction (Type u‚ÇÅ) F.op)
    (isoWhiskerRight curriedYonedaLemma' ((whiskeringLeft C·µí·µñ D·µí·µñ (Type u‚ÇÅ)).obj F.op : _))
set_option linter.uppercaseLean3 false in
#align category_theory.colimit_adj.extend_of_comp_yoneda_iso_Lan CategoryTheory.ColimitAdj.extendOfCompYonedaIsoLan

-- porting note: attaching `[simps!]` directly to the declaration causes a timeout.
attribute [simps!] extendOfCompYonedaIsoLan

end ColimitAdj

open ColimitAdj

/-- `F ‚ãô yoneda` is naturally isomorphic to `yoneda ‚ãô Lan F.op`. -/
@[simps!]
noncomputable def compYonedaIsoYonedaCompLan {D : Type u‚ÇÅ} [SmallCategory D] (F : C ‚•§ D) :
    F ‚ãô yoneda ‚âÖ yoneda ‚ãô lan F.op :=
  (isExtensionAlongYoneda (F ‚ãô yoneda)).symm ‚â™‚â´ isoWhiskerLeft yoneda (extendOfCompYonedaIsoLan F)
set_option linter.uppercaseLean3 false in
#align category_theory.comp_yoneda_iso_yoneda_comp_Lan CategoryTheory.compYonedaIsoYonedaCompLan

/-- Since `extendAlongYoneda A` is adjoint to `restrictedYoneda A`, if we use `A = yoneda`
then `restrictedYoneda A` is isomorphic to the identity, and so `extendAlongYoneda A` is as well.
-/
noncomputable def extendAlongYonedaYoneda : extendAlongYoneda (yoneda : C ‚•§ _) ‚âÖ ùü≠ _ :=
  Adjunction.natIsoOfRightAdjointNatIso (yonedaAdjunction _) Adjunction.id restrictedYonedaYoneda
#align category_theory.extend_along_yoneda_yoneda CategoryTheory.extendAlongYonedaYoneda

-- Maybe this should be reducible or an abbreviation?
/-- A functor to the presheaf category in which everything in the image is representable (witnessed
by the fact that it factors through the yoneda embedding).
`coconeOfRepresentable` gives a cocone for this functor which is a colimit and has point `P`.
-/
def functorToRepresentables (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : P.Elements·µí·µñ ‚•§ C·µí·µñ ‚•§ Type u‚ÇÅ :=
  (CategoryOfElements.œÄ P).leftOp ‚ãô yoneda
#align category_theory.functor_to_representables CategoryTheory.functorToRepresentables

/-- This is a cocone with point `P` for the functor `functorToRepresentables P`. It is shown in
`colimitOfRepresentable P` that this cocone is a colimit: that is, we have exhibited an arbitrary
presheaf `P` as a colimit of representables.

The construction of [MM92], Chapter I, Section 5, Corollary 3.
-/
noncomputable def coconeOfRepresentable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : Cocone (functorToRepresentables P) :=
  Cocone.extend (colimit.cocone _) (extendAlongYonedaYoneda.hom.app P)
#align category_theory.cocone_of_representable CategoryTheory.coconeOfRepresentable

@[simp]
theorem coconeOfRepresentable_pt (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : (coconeOfRepresentable P).pt = P :=
  rfl
set_option linter.uppercaseLean3 false in
#align category_theory.cocone_of_representable_X CategoryTheory.coconeOfRepresentable_pt

-- Marking this as a simp lemma seems to make things more awkward.
/-- An explicit formula for the legs of the cocone `coconeOfRepresentable`. -/
theorem coconeOfRepresentable_Œπ_app (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (j : P.Elements·µí·µñ) :
    (coconeOfRepresentable P).Œπ.app j = (yonedaSectionsSmall _ _).inv j.unop.2 :=
  colimit.Œπ_desc _ _
#align category_theory.cocone_of_representable_Œπ_app CategoryTheory.coconeOfRepresentable_Œπ_app

/-- The legs of the cocone `coconeOfRepresentable` are natural in the choice of presheaf. -/
theorem coconeOfRepresentable_naturality {P‚ÇÅ P‚ÇÇ : C·µí·µñ ‚•§ Type u‚ÇÅ} (Œ± : P‚ÇÅ ‚ü∂ P‚ÇÇ) (j : P‚ÇÅ.Elements·µí·µñ) :
    (coconeOfRepresentable P‚ÇÅ).Œπ.app j ‚â´ Œ± =
      (coconeOfRepresentable P‚ÇÇ).Œπ.app ((CategoryOfElements.map Œ±).op.obj j) := by
  ext T f
  simpa [coconeOfRepresentable_Œπ_app] using FunctorToTypes.naturality _ _ Œ± f.op _
#align category_theory.cocone_of_representable_naturality CategoryTheory.coconeOfRepresentable_naturality

/-- The cocone with point `P` given by `coconeOfRepresentable` is a colimit:
that is, we have exhibited an arbitrary presheaf `P` as a colimit of representables.

The result of [MM92], Chapter I, Section 5, Corollary 3.
-/
noncomputable def colimitOfRepresentable (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
    IsColimit (coconeOfRepresentable P) := by
  -- porting note:
  -- the `suffices` was not necessary in mathlib3; the function being `apply`ed has an
  -- `IsIso` input in square brackets; lean 3 was happy to give the user the input as a goal but
  -- lean 4 complains that typeclass inference can't find it.
  suffices IsIso (IsColimit.desc (colimit.isColimit (functorToRepresentables P))
    (coconeOfRepresentable P)) by
    apply IsColimit.ofPointIso (colimit.isColimit (functorToRepresentables P))
  change IsIso (colimit.desc _ (Cocone.extend _ _))
  rw [colimit.desc_extend, colimit.desc_cocone]
  infer_instance
#align category_theory.colimit_of_representable CategoryTheory.colimitOfRepresentable

/-- Given two functors L‚ÇÅ and L‚ÇÇ which preserve colimits, if they agree when restricted to the
representable presheaves then they agree everywhere.
-/
noncomputable def natIsoOfNatIsoOnRepresentables (L‚ÇÅ L‚ÇÇ : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞)
    [PreservesColimits L‚ÇÅ] [PreservesColimits L‚ÇÇ] (h : yoneda ‚ãô L‚ÇÅ ‚âÖ yoneda ‚ãô L‚ÇÇ) : L‚ÇÅ ‚âÖ L‚ÇÇ := by
  apply NatIso.ofComponents _ _
  ¬∑ intro P
    refine'
      (isColimitOfPreserves L‚ÇÅ (colimitOfRepresentable P)).coconePointsIsoOfNatIso
        (isColimitOfPreserves L‚ÇÇ (colimitOfRepresentable P)) _
    apply Functor.associator _ _ _ ‚â™‚â´ _
    exact isoWhiskerLeft (CategoryOfElements.œÄ P).leftOp h
  ¬∑ intro P‚ÇÅ P‚ÇÇ f
    apply (isColimitOfPreserves L‚ÇÅ (colimitOfRepresentable P‚ÇÅ)).hom_ext
    intro j
    dsimp only [id.def, isoWhiskerLeft_hom]
    have :
      (L‚ÇÅ.mapCocone (coconeOfRepresentable P‚ÇÅ)).Œπ.app j ‚â´ L‚ÇÅ.map f =
        (L‚ÇÅ.mapCocone (coconeOfRepresentable P‚ÇÇ)).Œπ.app
          ((CategoryOfElements.map f).op.obj j) := by
      dsimp
      rw [‚Üê L‚ÇÅ.map_comp, coconeOfRepresentable_naturality]
      rfl
    erw [reassoc_of% this, IsColimit.Œπ_map_assoc, IsColimit.Œπ_map]
    dsimp
    rw [‚Üê L‚ÇÇ.map_comp, coconeOfRepresentable_naturality]
    rfl
#align category_theory.nat_iso_of_nat_iso_on_representables CategoryTheory.natIsoOfNatIsoOnRepresentables

variable [HasColimits ‚Ñ∞]

/-- Show that `extendAlongYoneda` is the unique colimit-preserving functor which extends `A` to
the presheaf category.

The second part of [MM92], Chapter I, Section 5, Corollary 4.
See Property 3 of https://ncatlab.org/nlab/show/Yoneda+extension#properties.
-/
noncomputable def uniqueExtensionAlongYoneda (L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) (hL : yoneda ‚ãô L ‚âÖ A)
    [PreservesColimits L] : L ‚âÖ extendAlongYoneda A :=
  natIsoOfNatIsoOnRepresentables _ _ (hL ‚â™‚â´ (isExtensionAlongYoneda _).symm)
#align category_theory.unique_extension_along_yoneda CategoryTheory.uniqueExtensionAlongYoneda

/-- If `L` preserves colimits and `‚Ñ∞` has them, then it is a left adjoint. This is a special case of
`isLeftAdjointOfPreservesColimits` used to prove that.
-/
noncomputable def isLeftAdjointOfPreservesColimitsAux (L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞)
    [PreservesColimits L] : IsLeftAdjoint L where
  right := restrictedYoneda (yoneda ‚ãô L)
  adj := (yonedaAdjunction _).ofNatIsoLeft (uniqueExtensionAlongYoneda _ L (Iso.refl _)).symm
#align category_theory.is_left_adjoint_of_preserves_colimits_aux CategoryTheory.isLeftAdjointOfPreservesColimitsAux

/-- If `L` preserves colimits and `‚Ñ∞` has them, then it is a left adjoint. Note this is a (partial)
converse to `leftAdjointPreservesColimits`.
-/
noncomputable def isLeftAdjointOfPreservesColimits (L : (C ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞) [PreservesColimits L] :
    IsLeftAdjoint L :=
  let e : _ ‚•§ Type u‚ÇÅ ‚âå _ ‚•§ Type u‚ÇÅ := (opOpEquivalence C).congrLeft
  let _ := isLeftAdjointOfPreservesColimitsAux (e.functor ‚ãô L : _)
  Adjunction.leftAdjointOfNatIso (e.invFunIdAssoc _)
#align category_theory.is_left_adjoint_of_preserves_colimits CategoryTheory.isLeftAdjointOfPreservesColimits

end SmallCategory

section ArbitraryUniverses

variable {C : Type u‚ÇÅ} [Category.{v‚ÇÅ} C] (P : C·µí·µñ ‚•§ Type v‚ÇÅ)

/-- For a presheaf `P`, consider the forgetful functor from the category of representable
    presheaves over `P` to the category of presheaves. There is a tautological cocone over this
    functor whose leg for a natural transformation `V ‚ü∂ P` with `V` representable is just that
    natural transformation. -/
@[simps]
def tautologicalCocone : Cocone (CostructuredArrow.proj yoneda P ‚ãô yoneda) where
  pt := P
  Œπ := { app := fun X => X.hom }

/-- The tautological cocone with point `P` is a colimit cocone, exhibiting `P` as a colimit of
    representables. -/
def isColimitTautologicalCocone : IsColimit (tautologicalCocone P) where
  desc := fun s => by
    refine' ‚ü®fun X t => yonedaEquiv (s.Œπ.app (CostructuredArrow.mk (yonedaEquiv.symm t))), _‚ü©
    intros X Y f
    ext t
    dsimp
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
    erw [yonedaEquiv_naturality', yonedaEquiv_symm_map]
    simpa using (s.Œπ.naturality
      (CostructuredArrow.homMk' (CostructuredArrow.mk (yonedaEquiv.symm t)) f.unop)).symm
  fac := by
    intro s t
    dsimp
    apply yonedaEquiv.injective
    rw [yonedaEquiv_comp]
    dsimp only
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
    erw [Equiv.symm_apply_apply]
    rfl
  uniq := by
    intro s j h
    ext V x
    obtain ‚ü®t, rfl‚ü© := yonedaEquiv.surjective x
    dsimp
    -- This used to be `rw`, but we need `erw` after leanprover/lean4#2644
    erw [Equiv.symm_apply_apply, ‚Üê yonedaEquiv_comp']
    exact congr_arg _ (h (CostructuredArrow.mk t))

lemma a : 0 = 0 := rfl

variable {I : Type v‚ÇÅ} [SmallCategory I] (Œ± : I ‚•§ C)

structure IsYonedaPreimage {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) {X : C} (s : yoneda.obj X ‚ü∂ A)
    (u : F.obj (Opposite.op X)) : Prop where
  (app : Œ∑.app _ u = yonedaEquiv s)

lemma IsYonedaPreimage.map‚ÇÅ {F G A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} {Œµ : F ‚ü∂ G} (hŒµ : Œµ ‚â´ Œº = Œ∑)
    {X : C} {s : yoneda.obj X ‚ü∂ A} {u : F.obj (Opposite.op X)} (h : IsYonedaPreimage Œ∑ s u) :
    IsYonedaPreimage Œº s (Œµ.app _ u) :=
  ‚ü®by rw [‚Üê elementwise_of% NatTrans.comp_app Œµ Œº, hŒµ, h.app]‚ü©

lemma IsYonedaPreimage.map‚ÇÇ {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {X Y : C} (f : X ‚ü∂ Y)
    {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A} (hst : yoneda.map f ‚â´ t = s)
    {u : F.obj (Opposite.op Y)} (h : IsYonedaPreimage Œ∑ t u) : IsYonedaPreimage Œ∑ s (F.map f.op u) :=
  ‚ü®by rw [elementwise_of% Œ∑.naturality, h.app, yonedaEquiv_naturality, hst]‚ü©

def YonedaPreimage {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) {X : C} (s : yoneda.obj X ‚ü∂ A) : Type v‚ÇÅ :=
  Subtype (IsYonedaPreimage Œ∑ s)

def YonedaPreimage.val {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A} :
    YonedaPreimage Œ∑ s ‚Üí F.obj (Opposite.op X) :=
  Subtype.val

@[ext]
lemma YonedaPreimage.ext {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    {u v : YonedaPreimage Œ∑ s} : u.val = v.val ‚Üí u = v :=
  Subtype.ext

-- lemma YonedaPreimage.val_eqToHom {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}

lemma YonedaPreimage.app_val {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    (p : YonedaPreimage Œ∑ s) : Œ∑.app _ p.val = yonedaEquiv s :=
  p.prop.app

@[simp]
lemma YonedaPreimage.map_val {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Y : C} {Œ∑ : yoneda.obj Y ‚ü∂ A} {X : C} {s : yoneda.obj X ‚ü∂ A}
    (p : YonedaPreimage Œ∑ s) : yoneda.map p.val ‚â´ Œ∑ = s := by
  apply yonedaEquiv.injective
  simp [yonedaEquiv_comp, yonedaEquiv_yoneda_map, p.app_val, Opposite.op_unop]

def YonedaPreimage.map‚ÇÅ {F G A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} {X : C}
    {s : yoneda.obj X ‚ü∂ A} (u : YonedaPreimage Œ∑ s) (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) :
    YonedaPreimage Œº s :=
  ‚ü®Œµ.app _ u.val, IsYonedaPreimage.map‚ÇÅ hŒµ u.2‚ü©

@[simp]
lemma YonedaPreimage.map‚ÇÅ_val {F G A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} {X : C}
    (s : yoneda.obj X ‚ü∂ A) (u : YonedaPreimage Œ∑ s) (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) :
    (u.map‚ÇÅ Œµ hŒµ).val = Œµ.app _ u.val :=
  rfl

def YonedaPreimage.map‚ÇÇ {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {X Y : C} {s : yoneda.obj X ‚ü∂ A}
  {t : yoneda.obj Y ‚ü∂ A} (u : YonedaPreimage Œ∑ t) (f : X ‚ü∂ Y) (hst : yoneda.map f ‚â´ t = s) :
    YonedaPreimage Œ∑ s :=
  ‚ü®F.map f.op u.val, IsYonedaPreimage.map‚ÇÇ f hst u.2‚ü©

@[simp]
lemma YonedaPreimage.map‚ÇÇ_val {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {X Y : C} (f : X ‚ü∂ Y)
    {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A} (hst : yoneda.map f ‚â´ t = s)
    (u : YonedaPreimage Œ∑ t) : (u.map‚ÇÇ f hst).val = F.map f.op u.val :=
  rfl

-- lemma YonedaPreimage.map‚ÇÇ_val_eqToHom {F A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {X Y : C} (h : X = Y)
--     {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A} (u : YonedaPreimage Œ∑ t) : (u.map‚ÇÇ (eqToHom h) _).val = u.val := sorry

@[simp]
lemma YonedaPreimage_map‚ÇÅ_map‚ÇÇ {F G A : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) {X Y : C}
    {s : yoneda.obj X ‚ü∂ A} {t : yoneda.obj Y ‚ü∂ A}
    (f : X ‚ü∂ Y) (hf : yoneda.map f ‚â´ t = s) (u : YonedaPreimage Œ∑ t) :
    (u.map‚ÇÅ Œµ hŒµ).map‚ÇÇ f hf = (u.map‚ÇÇ f hf).map‚ÇÅ Œµ hŒµ :=
  YonedaPreimage.ext <| (elementwise_of% (Œµ.naturality f.op).symm) u.val

@[simps (config := { fullyApplied := false }) obj map]
def yonedaPreimageFunctor' {A F : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ where
  obj s := YonedaPreimage Œ∑ s.unop.hom
  map f u := u.map‚ÇÇ f.unop.left f.unop.w

@[simps]
def yonedaPreimageFunctor'_map‚ÇÅ {A F G : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) :
    yonedaPreimageFunctor' Œ∑ ‚ü∂ yonedaPreimageFunctor' Œº where
  app s u := u.map‚ÇÅ Œµ hŒµ

@[simps]
def yonedaPreimageFunctor (A : C·µí·µñ ‚•§ Type v‚ÇÅ) : Over A ‚•§ (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ where
  obj Œ∑ := yonedaPreimageFunctor' Œ∑.hom
  map Œµ := yonedaPreimageFunctor'_map‚ÇÅ Œµ.left Œµ.w

def yonedaPreimageCostructuredArrow (A : C·µí·µñ ‚•§ Type v‚ÇÅ) (s t : CostructuredArrow yoneda A) :
    YonedaPreimage s.hom t.hom ‚âÖ t ‚ü∂ s :=
  ‚ü®fun p => CostructuredArrow.homMk p.val (by aesop_cat), fun f => ‚ü®f.left, ‚ü®by
    have := f.w
    dsimp at this
    rw [Category.comp_id] at this
    rw [‚Üê this, ‚Üê yonedaEquiv_naturality]
    dsimp
    have := congrFun (s.hom.naturality f.left.op) (ùüô s.left)
    dsimp at this
    rw [‚Üê this, Category.comp_id]
  ‚ü©‚ü©, by aesop_cat, by aesop_cat‚ü©

@[simps!]
def yonedaCompYonedaPreimageFunctor (A : C·µí·µñ ‚•§ Type v‚ÇÅ) :
    CostructuredArrow.toOver yoneda A ‚ãô yonedaPreimageFunctor A ‚âÖ yoneda :=
  NatIso.ofComponents (fun s => by
    refine' NatIso.ofComponents (fun t => yonedaPreimageCostructuredArrow _ _ _) _
    aesop_cat
  ) (by aesop_cat)

lemma b : 0 = 0 := rfl

def YonedaCollection {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) (X : C) :
    Type v‚ÇÅ :=
  Œ£ (s : A.obj (Opposite.op X)), F.obj (Opposite.op (CostructuredArrow.mk (yonedaEquiv.symm s)))

def YonedaCollection.mk {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    {X : C} (s : A.obj (Opposite.op X)) (x : F.obj (Opposite.op (CostructuredArrow.mk (yonedaEquiv.symm s)))) :
    YonedaCollection F X :=
  ‚ü®s, x‚ü©

def YonedaCollection.mk' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    {X : C} (s : yoneda.obj X ‚ü∂ A) (x : F.obj (Opposite.op (CostructuredArrow.mk s))) :
    YonedaCollection F X := ‚ü®yonedaEquiv s, F.map (eqToHom <| by rw [Equiv.symm_apply_apply]) x‚ü©

def YonedaCollection.fst {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    {X : C} (p : YonedaCollection F X) : A.obj (Opposite.op X) := p.1

def YonedaCollection.snd {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    {X : C} (p : YonedaCollection F X) :
    F.obj (Opposite.op (CostructuredArrow.mk (yonedaEquiv.symm p.fst))) := p.2

def YonedaCollection.fst' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    {X : C} (p : YonedaCollection F X) : yoneda.obj X ‚ü∂ A :=
  yonedaEquiv.symm p.fst

def YonedaCollection.snd' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    {X : C} (p : YonedaCollection F X) : F.obj (Opposite.op (CostructuredArrow.mk p.fst')) :=
  p.snd

lemma YonedaCollection.fst_eq_yonedEquiv_fst' {A : C·µí·µñ ‚•§ Type v‚ÇÅ}
    {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ} {X : C} (p : YonedaCollection F X) :
    p.fst = yonedaEquiv p.fst' :=
  (Equiv.apply_symm_apply _ _).symm

@[simp]
lemma YonedaCollection.mk'_fst' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    {X : C} (s : yoneda.obj X ‚ü∂ A) (x : F.obj (Opposite.op (CostructuredArrow.mk s))) :
    (YonedaCollection.mk' s x).fst' = s :=
  Equiv.apply_symm_apply _ _

@[simp]
lemma YonedaCollection.mk'_snd' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    {X : C} (s : yoneda.obj X ‚ü∂ A) (x : F.obj (Opposite.op (CostructuredArrow.mk s))) :
    (YonedaCollection.mk' s x).snd' = F.map (eqToHom <| by rw [YonedaCollection.mk'_fst']) x := rfl

@[ext]
lemma YonedaCollection.ext' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    {X : C} (p q : YonedaCollection F X) : (h : p.fst' = q.fst') ‚Üí F.map (eqToHom <| by rw [h]) q.snd' = p.snd' ‚Üí p = q := by
  -- TODO: Clean up this proof
  intro h h'
  rcases p with ‚ü®p, p'‚ü©
  rcases q with ‚ü®q, q'‚ü©
  obtain rfl : p = q := yonedaEquiv.symm.injective h
  apply Sigma.ext
  ¬∑ rfl
  ¬∑ rw [heq_eq_eq]
    convert h'.symm
    simp [snd']
    rfl

def YonedaCollection.map‚ÇÅ {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    (Œ∑ : F ‚ü∂ G) {X : C} : YonedaCollection F X ‚Üí YonedaCollection G X := fun p =>
  YonedaCollection.mk' p.fst' (Œ∑.app _ p.snd')

@[simp]
lemma YonedaCollection.map‚ÇÅ_fst' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    (Œ∑ : F ‚ü∂ G) {X : C} (p : YonedaCollection F X) : (YonedaCollection.map‚ÇÅ Œ∑ p).fst' = p.fst' := by
  simp [map‚ÇÅ]

@[simp]
lemma YonedaCollection.map‚ÇÅ_snd' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    (Œ∑ : F ‚ü∂ G) {X : C} (p : YonedaCollection F X) :
    (YonedaCollection.map‚ÇÅ Œ∑ p).snd' = G.map (eqToHom (by rw [YonedaCollection.map‚ÇÅ_fst'])) (Œ∑.app _ p.snd') := by
  simp [map‚ÇÅ]

@[simp]
lemma YonedaCollection.map‚ÇÅ_fst {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    (Œ∑ : F ‚ü∂ G) {X : C} (p : YonedaCollection F X) :
    (YonedaCollection.map‚ÇÅ Œ∑ p).fst = p.fst := by
  simp only [YonedaCollection.fst_eq_yonedEquiv_fst', map‚ÇÅ_fst']

def YonedaCollection.map‚ÇÇ {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) {X Y : C}
    (f : X ‚ü∂ Y) : YonedaCollection F Y ‚Üí YonedaCollection F X := fun p =>
  YonedaCollection.mk' (yoneda.map f ‚â´ p.fst') $ F.map (Quiver.Hom.op (CostructuredArrow.homMk'' p.fst' f)) p.snd'

@[simp]
lemma YonedaCollection.map‚ÇÇ_fst' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) {X Y : C}
    (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    (YonedaCollection.map‚ÇÇ F f p).fst' = yoneda.map f ‚â´ p.fst' :=
  by simp [map‚ÇÇ]

@[simp]
lemma YonedaCollection.map‚ÇÇ_fst {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) {X Y : C}
    (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    (YonedaCollection.map‚ÇÇ F f p).fst = A.map f.op p.fst := by
  simp only [YonedaCollection.fst_eq_yonedEquiv_fst', map‚ÇÇ_fst', yonedaEquiv_naturality]

@[simp]
lemma YonedaCollection.map‚ÇÇ_snd' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) {X Y : C}
    (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    (YonedaCollection.map‚ÇÇ F f p).snd' = F.map (Quiver.Hom.op (CostructuredArrow.homMk'' p.fst' f) ‚â´ eqToHom (by rw [YonedaCollection.map‚ÇÇ_fst' F f])) p.snd' := by
  simp [map‚ÇÇ]

@[simp]
lemma bla {F : C ‚•§ Type w} {X Y Z : C} (h‚ÇÅ : X = Y) (h‚ÇÇ : Y = Z) (x : F.obj X) :
  F.map (eqToHom h‚ÇÇ) (F.map (eqToHom h‚ÇÅ) x) = F.map (eqToHom (h‚ÇÅ.trans h‚ÇÇ)) x :=
  by aesop_cat

attribute [simp] CostructuredArrow.homMk''_id

@[simp]
lemma YonedaCollection.map‚ÇÇ_id {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ} {X : C} :
    YonedaCollection.map‚ÇÇ F (ùüô X) = id := by
  ext p
  ¬∑ simp
  ¬∑ simp

-- How does simp even know how to apply this
@[simp]
lemma blubb {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ} {X Y : C} {f : X ‚ü∂ Y}
    {g g' : yoneda.obj Y ‚ü∂ A} (h : g = g') {x : F.obj (Opposite.op (CostructuredArrow.mk g'))} :
  F.map (CostructuredArrow.homMk'' g f).op (F.map (eqToHom (by rw [h])) x) = F.map (eqToHom (by rw [h])) (F.map (CostructuredArrow.homMk'' g' f).op x)
   := by aesop_cat

attribute [simp] CostructuredArrow.homMk''_comp

@[simp]
lemma YonedaCollection.map‚ÇÇ_comp {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ} {X Y Z : C}
    (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : YonedaCollection.map‚ÇÇ F (f ‚â´ g) = YonedaCollection.map‚ÇÇ F f ‚àò YonedaCollection.map‚ÇÇ F g := by
  ext p
  ¬∑ simp
  ¬∑ simp

@[simp]
lemma YonedaCollection.map‚ÇÅ_map‚ÇÇ {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
  (Œ∑ : F ‚ü∂ G) {X Y : C} (f : X ‚ü∂ Y) (p : YonedaCollection F Y) :
    YonedaCollection.map‚ÇÇ G f (YonedaCollection.map‚ÇÅ Œ∑ p) = YonedaCollection.map‚ÇÅ Œ∑ (YonedaCollection.map‚ÇÇ F f p) := by
  ext
  ¬∑ simp
  ¬∑ simp [FunctorToTypes.naturality]

@[simp]
lemma YonedaCollection.map‚ÇÅ_id {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ} {X : C} :
  YonedaCollection.map‚ÇÅ (ùüô F) (X := X) = id := by aesop_cat

@[simp]
lemma YonedaCollection.map‚ÇÅ_comp {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F G H : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ}
    (Œ∑ : F ‚ü∂ G) (Œº : G ‚ü∂ H) {X : C} :
    YonedaCollection.map‚ÇÅ (Œ∑ ‚â´ Œº) (X := X) = YonedaCollection.map‚ÇÅ Œº (X := X) ‚àò YonedaCollection.map‚ÇÅ Œ∑ (X := X) := by
  ext
  ¬∑ simp
  ¬∑ simp [FunctorToTypes.naturality]

@[simps (config := { fullyApplied := false })]
def YonedaCollectionFunctor' (A : C·µí·µñ ‚•§ Type v‚ÇÅ) (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) :
    C·µí·µñ ‚•§ Type v‚ÇÅ where
  obj X := YonedaCollection F X.unop
  map f := YonedaCollection.map‚ÇÇ F f.unop

@[simps]
def YonedaCollectionMap {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ G) :
    YonedaCollectionFunctor' A F ‚ü∂ YonedaCollectionFunctor' A G where
  app X := YonedaCollection.map‚ÇÅ Œ∑
  naturality := by
    intros
    ext
    simp

@[simps (config := { fullyApplied := false }) obj map]
def YonedaCollectionFunctor (A : C·µí·µñ ‚•§ Type v‚ÇÅ) : ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ C·µí·µñ ‚•§ Type v‚ÇÅ where
  obj := YonedaCollectionFunctor' A
  map Œ∑ := YonedaCollectionMap Œ∑

@[simps (config := { fullyApplied := false }) app]
def YonedaCollectionFunctorToA (A : C·µí·µñ ‚•§ Type v‚ÇÅ) (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) :
    YonedaCollectionFunctor' A F ‚ü∂ A where
  app X := YonedaCollection.fst

@[simps! (config := { fullyApplied := false }) obj map]
def YonedaCollectionTotal (A : C·µí·µñ ‚•§ Type v‚ÇÅ) :
    ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) ‚•§ Over A :=
  (YonedaCollectionFunctor A).toOver _ (YonedaCollectionFunctorToA A) (by aesop_cat)

theorem c : 0 = 0 := rfl

def ax {A F : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) (X : C) :
    YonedaCollection (yonedaPreimageFunctor' Œ∑) X ‚Üí F.obj (Opposite.op X) :=
  fun p => p.snd'.val

@[simp]
lemma ax_naturality‚ÇÅ {A F G : C·µí·µñ ‚•§ Type v‚ÇÅ} {Œ∑ : F ‚ü∂ A} {Œº : G ‚ü∂ A} (Œµ : F ‚ü∂ G) (hŒµ : Œµ ‚â´ Œº = Œ∑) (X : C) (p : YonedaCollection (yonedaPreimageFunctor' Œ∑) X) :
    ax Œº X (p.map‚ÇÅ (yonedaPreimageFunctor'_map‚ÇÅ Œµ hŒµ)) = Œµ.app _ (ax Œ∑ X p) := by
  simp [ax]

@[simp]
lemma ax_naturality‚ÇÇ {A F : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) (X Y : C) (f : X ‚ü∂ Y) (p : YonedaCollection (yonedaPreimageFunctor' Œ∑) Y) :
    ax Œ∑ X (YonedaCollection.map‚ÇÇ (yonedaPreimageFunctor' Œ∑) f p) = F.map f.op (ax Œ∑ Y p) := by
  simp [ax]

@[simp]
lemma app_ax {A F : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) (X : C·µí·µñ) (p : YonedaCollection (yonedaPreimageFunctor' Œ∑) X.unop) :
    Œ∑.app X (ax Œ∑ X.unop p) = p.fst := by
  simp [ax]
  have := p.snd'.app_val
  dsimp [-yonedaEquiv_apply] at this
  simp [-yonedaEquiv_apply, this, YonedaCollection.fst_eq_yonedEquiv_fst']

def back {A F : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) (X : C) :
    F.obj (Opposite.op X) ‚Üí YonedaCollection (yonedaPreimageFunctor' Œ∑) X :=
  fun x => YonedaCollection.mk' (yonedaEquiv.symm (Œ∑.app _ x)) ‚ü®x, ‚ü®by aesop_cat‚ü©‚ü©

lemma ax_back {A F : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) (X : C) : ax Œ∑ X ‚àò back Œ∑ X = id := by
  ext x
  dsimp [ax, back]
  aesop_cat

lemma back_ax {A F : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) (X : C) : back Œ∑ X ‚àò ax Œ∑ X = id := by
  ext1 p
  simp [ax, back]
  refine' YonedaCollection.ext' _ _ _ _
  ¬∑ have := p.snd'.app_val
    dsimp [-yonedaEquiv_apply] at this
    dsimp
    simp [-yonedaEquiv_apply, this]
  ¬∑ apply YonedaPreimage.ext
    aesop_cat

@[simps]
def bij {A F : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) (X : C) :
    YonedaCollection (yonedaPreimageFunctor' Œ∑) X ‚âÖ F.obj (Opposite.op X) where
  hom := ax Œ∑ X
  inv := back Œ∑ X
  hom_inv_id := back_ax Œ∑ X
  inv_hom_id := ax_back Œ∑ X

@[simps!]
def unit‚ÇÄ {A F : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ A) : YonedaCollectionFunctor' A (yonedaPreimageFunctor' Œ∑) ‚âÖ F :=
  NatIso.ofComponents (fun X => bij Œ∑ X.unop) (by aesop_cat)

@[simps!]
def unit_pt {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : Over A) : (yonedaPreimageFunctor A ‚ãô YonedaCollectionTotal A).obj Œ∑ ‚âÖ Œ∑ :=
  Over.isoMk (unit‚ÇÄ Œ∑.hom) (by aesop_cat)

def unit {A : C·µí·µñ ‚•§ Type v‚ÇÅ} : yonedaPreimageFunctor A ‚ãô YonedaCollectionTotal A ‚âÖ ùü≠ (Over A) :=
  NatIso.ofComponents unit_pt (by aesop_cat)

theorem d : 0 = 0 := rfl

@[simp]
lemma val_fst' {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) (X : C)
    (s : yoneda.obj X ‚ü∂ A) (p : YonedaPreimage (YonedaCollectionFunctorToA A F) s) : p.val.fst' = s := by
  simpa [-yonedaEquiv_apply, YonedaCollection.fst_eq_yonedEquiv_fst'] using p.app_val

def cofo {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) (s : CostructuredArrow yoneda A) :
    F.obj (Opposite.op s) ‚Üí YonedaPreimage (YonedaCollectionFunctorToA A F) s.hom :=
  fun x => ‚ü®YonedaCollection.mk' s.hom x, ‚ü®by simp [-yonedaEquiv_apply, YonedaCollection.fst_eq_yonedEquiv_fst']‚ü©‚ü©

--cofo G s.unop (Œ∑.app s x) = YonedaPreimage.map‚ÇÅ (cofo F s.unop x) (NatTrans.mk fun X ‚Ü¶ YonedaCollection.map‚ÇÅ Œ∑) _

@[simp]
lemma cofo_naturality‚ÇÅ {A : C·µí·µñ ‚•§ Type v‚ÇÅ} {F G : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ} (Œ∑ : F ‚ü∂ G)
    (s : (CostructuredArrow yoneda A)·µí·µñ) (x : F.obj s) : cofo G s.unop (Œ∑.app s x) = YonedaPreimage.map‚ÇÅ (cofo F s.unop x) (YonedaCollectionMap Œ∑) (by aesop_cat) := by
  dsimp [cofo]
  apply YonedaPreimage.ext
  simp
  refine' YonedaCollection.ext' _ _ _ _
  ¬∑ simp
  ¬∑ simp
    erw [YonedaCollection.mk'_snd']
    erw [YonedaCollection.mk'_snd']
    exact FunctorToTypes.naturality _ _ _ _ _

-- F.map f ‚â´ (cobij F Y.unop).hom = (cobij F X.unop).hom ‚â´ fun u ‚Ü¶ YonedaPreimage.map‚ÇÇ u f.unop.left _
-- cofo F t.unop (F.map f x) = YonedaPreimage.map‚ÇÇ (cofo F s.unop x) f.unop.left _

lemma bloink {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) (s t : CostructuredArrow yoneda A)
    (f : s ‚ü∂ t) (x : F.obj (Opposite.op t)) : (F.map (CostructuredArrow.homMk'' t.hom f.left).op x) = F.map (eqToHom <| by simp [‚Üê CostructuredArrow.eq_mk]) (F.map f.op x) := by
  have : (CostructuredArrow.homMk'' t.hom f.left).op = f.op ‚â´ eqToHom (by simp [‚Üê CostructuredArrow.eq_mk]) := by
    apply Quiver.Hom.unop_inj
    aesop_cat
  erw [this]
  simp

@[simp]
lemma cofo_naturality‚ÇÇ {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) (s t : (CostructuredArrow yoneda A)·µí·µñ)
    (f : t ‚ü∂ s) (x : F.obj t) : cofo F s.unop (F.map f x) = YonedaPreimage.map‚ÇÇ (cofo F t.unop x) f.unop.left (by simp) := by
  simp [cofo]
  apply YonedaPreimage.ext
  rw [YonedaPreimage.map‚ÇÇ_val]
  refine' YonedaCollection.ext' _ _ _ _
  ¬∑ simp only [Opposite.unop_op, YonedaCollectionFunctor'_obj, val_fst',
    YonedaCollectionFunctor'_map, Quiver.Hom.unop_op, YonedaCollection.map‚ÇÇ_fst', CommaMorphism.w,
    Functor.const_obj_obj, CostructuredArrow.right_eq_id, Functor.const_obj_map, comp_id]
  ¬∑ erw [YonedaCollection.mk'_snd']
    erw [YonedaCollection.mk'_snd']
    erw [YonedaCollection.mk'_snd']
    simp only [Opposite.unop_op, YonedaCollectionFunctor'_obj, YonedaCollectionFunctor'_map,
      Quiver.Hom.unop_op, id_eq, eq_mpr_eq_cast, val_fst', blubb, bla]
    erw [bloink]
    simp

def coba {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) (s : CostructuredArrow yoneda A) :
    YonedaPreimage (YonedaCollectionFunctorToA A F) s.hom ‚Üí F.obj (Opposite.op s) :=
  fun p => F.map (eqToHom (by simp [val_fst', ‚Üê CostructuredArrow.eq_mk])) p.val.snd'

lemma cofo_coba {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) (s : CostructuredArrow yoneda A) :
    cofo F s ‚àò coba F s = id := by
  ext p
  dsimp [cofo, coba]
  change YonedaCollection.mk' _ _ = _
  refine' YonedaCollection.ext' _ _ _ _
  ¬∑ simp
  ¬∑ simp

lemma coba_cofo {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) (s : CostructuredArrow yoneda A) :
    coba F s ‚àò cofo F s = id := by
  ext x
  dsimp [cofo, coba]
  erw [YonedaCollection.mk'_snd']
  simp

@[simps]
def cobij {A : C·µí·µñ ‚•§ Type v‚ÇÅ} (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) (s : CostructuredArrow yoneda A) :
    F.obj (Opposite.op s) ‚âÖ YonedaPreimage (YonedaCollectionFunctorToA A F) s.hom where
  hom := cofo F s
  inv := coba F s
  hom_inv_id := coba_cofo F s
  inv_hom_id := cofo_coba F s

@[simps! (config := { fullyApplied := false }) hom]
def counit‚ÇÄ (A : C·µí·µñ ‚•§ Type v‚ÇÅ) (F : (CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) :
    F ‚âÖ yonedaPreimageFunctor' (YonedaCollectionFunctorToA A F) :=
  NatIso.ofComponents (fun s => cobij F s.unop) (by aesop_cat)

def counit {A : C·µí·µñ ‚•§ Type v‚ÇÅ} : ùü≠ ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) ‚âÖ (YonedaCollectionTotal A ‚ãô yonedaPreimageFunctor A) :=
  NatIso.ofComponents (counit‚ÇÄ A) (by aesop_cat)

def OverEquivPresheafCostructuredArrow (A : C·µí·µñ ‚•§ Type v‚ÇÅ) : Over A ‚âå ((CostructuredArrow yoneda A)·µí·µñ ‚•§ Type v‚ÇÅ) :=
  Equivalence.mk (yonedaPreimageFunctor A) (YonedaCollectionTotal A) (unit).symm (counit).symm

def ToOverCompOverEquivPresheafCostructuredArrow (A : C·µí·µñ ‚•§ Type v‚ÇÅ) : CostructuredArrow.toOver yoneda A ‚ãô (OverEquivPresheafCostructuredArrow A).functor ‚âÖ yoneda :=
  yonedaCompYonedaPreimageFunctor A

open Functor

theorem final_toCostructuredArrow_comp_pre {c : Cocone (Œ± ‚ãô yoneda)} (hc : IsColimit c) :
    Final (c.toCostructuredArrow ‚ãô CostructuredArrow.pre Œ± yoneda c.pt) := by
  refine' cofinal_of_colimit_comp_coyoneda_iso_pUnit _ (fun d => _)
  refine' Types.isTerminalEquivIsoPUnit _ _
  suffices IsTerminal (colimit (c.toCostructuredArrow ‚ãô CostructuredArrow.pre Œ± _ _ ‚ãô yoneda)) by
    let b := IsTerminal.isTerminalObj ((evaluation _ _).obj (Opposite.op d)) _ this
    apply IsTerminal.ofIso b
    let e := preservesColimitIso
      ((evaluation (CostructuredArrow yoneda c.pt)·µí·µñ (Type v‚ÇÅ)).obj (Opposite.op d))
      (Cocone.toCostructuredArrow c ‚ãô CostructuredArrow.pre Œ± yoneda c.pt ‚ãô yoneda)
    exact e
  refine' IsTerminal.isTerminalOfObj (OverEquivPresheafCostructuredArrow c.pt).inverse
    (colimit (c.toCostructuredArrow ‚ãô CostructuredArrow.pre Œ± _ _  ‚ãô yoneda)) _
  apply IsTerminal.ofIso (Over.mkIdTerminal)
  let i := preservesColimitIso ((OverEquivPresheafCostructuredArrow c.pt).inverse) (Cocone.toCostructuredArrow c ‚ãô CostructuredArrow.pre Œ± yoneda c.pt ‚ãô yoneda)
  refine' _ ‚â™‚â´ i.symm
  let j := ToOverCompOverEquivPresheafCostructuredArrow c.pt

  -- TODO: Extract this out
  let k : CostructuredArrow.toOver yoneda c.pt ‚âÖ yoneda ‚ãô (OverEquivPresheafCostructuredArrow c.pt).inverse := by
    calc
      CostructuredArrow.toOver yoneda c.pt ‚âÖ CostructuredArrow.toOver yoneda c.pt ‚ãô (OverEquivPresheafCostructuredArrow c.pt).functor ‚ãô (OverEquivPresheafCostructuredArrow c.pt).inverse
        := isoWhiskerLeft (CostructuredArrow.toOver _ _) ((OverEquivPresheafCostructuredArrow c.pt).unitIso)
      _ ‚âÖ yoneda ‚ãô (OverEquivPresheafCostructuredArrow c.pt).inverse := isoWhiskerRight j (OverEquivPresheafCostructuredArrow c.pt).inverse

  let k' := isoWhiskerLeft (Cocone.toCostructuredArrow c ‚ãô CostructuredArrow.pre Œ± yoneda c.pt) k
  let k'' := HasColimit.isoOfNatIso k'
  refine' _ ‚â™‚â´ k''
  let u : colimit ((Cocone.toCostructuredArrow c ‚ãô CostructuredArrow.pre Œ± yoneda c.pt) ‚ãô CostructuredArrow.toOver yoneda c.pt ‚ãô Over.forget _) ‚âÖ c.pt :=
    IsColimit.coconePointUniqueUpToIso (colimit.isColimit _) hc
  let v := preservesColimitIso (Over.forget _) ((Cocone.toCostructuredArrow c ‚ãô CostructuredArrow.pre Œ± yoneda c.pt) ‚ãô CostructuredArrow.toOver yoneda c.pt)
  let w := v ‚â™‚â´ u
  refine' Over.isoMk w.symm _
  apply hc.hom_ext
  intro i
  simp [preservesColimitIso, IsColimit.coconePointUniqueUpToIso]
  erw [colimit.Œπ_desc_assoc]
  simp

end ArbitraryUniverses


end CategoryTheory
